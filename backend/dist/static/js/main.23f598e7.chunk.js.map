{"version":3,"sources":["constants.ts","controllers/axios.ts","types/types.ts","controllers/patients.ts","controllers/users.ts","controllers/auth.ts","controllers/index.ts","state/reducers/patients.ts","state/reducers/diagnoses.ts","state/reducers/auth.ts","state/reducers/scheduler.ts","state/reducers/message.ts","state/state.tsx","state/actions/patients.ts","state/actions/diagnoses.ts","state/actions/auth.ts","state/actions/message.ts","components/AuthenticationPage/index.tsx","components/FormFields/SelectGender.tsx","components/FormFields/TextField.tsx","components/FormFields/DateField.tsx","components/FormFields/SelectDiagnosis.tsx","components/FormFields/SelectEntryType.tsx","components/AddPatientModal/AddPatientForm.tsx","components/AddPatientModal/index.tsx","components/HealthRatingBar.tsx","components/SortableTable/index.tsx","components/PatientListPage/index.tsx","components/PatientEntryCard.tsx","components/AddDiagnosisModal/AddDiagnosisForm.tsx","components/SearchICDCode/SearchResultsList.tsx","components/SearchICDCode/index.tsx","components/AddDiagnosisModal/index.tsx","components/FormFields/SelectHealthRating.tsx","components/AddPatientEntryModal/AddEntryForm.tsx","components/AddPatientEntryModal/index.tsx","components/PatientInfoPage/PatientInfo.tsx","components/DiagnosisListPage/index.tsx","components/UserInfo/index.tsx","App.tsx","state/actions/scheduler.ts","index.tsx","state/reducer.ts"],"names":["apiBaseUrl","process","axios","defaults","baseURL","withCredentials","Gender","EntryType","HealthCheckRating","MessageVariation","setAuthToken","token","headers","common","fetchPatients","a","get","response","data","fetchPatient","id","fetchUser","decodeAccessToken","accessToken","exec","length","JSON","parse","atob","loginUser","username","password","post","logoutUser","userId","delete","registerUser","name","roles","user","refreshAccessToken","put","initialState","reducer","state","action","type","payload","reduce","memo","patient","Object","assign","fromEntries","entries","filter","diagnosis","code","slice","show","patients","diagnoses","auth","scheduler","message","StateContext","createContext","StateProvider","children","useReducer","dispatch","Provider","value","useStateValue","useContext","setPatientList","list","addPatient","removePatient","setDiagnosisList","addDiagnosis","removeDiagnosis","displayMessage","msg","AuthenticationFormFunction","SelectGender","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","formatDate","date","String","trim","Date","Number","isNaN","Error","parts","toLocaleDateString","year","month","day","split","DateField","dateFormatter","setFieldTouched","setFieldValue","useEffect","undefined","test","SelectDiagnosis","initialValues","onSearchChange","stateOptions","key","text","Dropdown","fluid","multiple","search","selection","onChange","_event","defaultValue","SelectEntryType","entryTypes","initialValue","entryTypesToOptions","v","join","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","undeterminedStyle","opacity","maxRating","CriticalRisk","HealthRatingBar","rating","showText","inlineText","Undetermined","Rating","icon","display","SortableTable","header","sortFunc","actions","React","useState","order","sortBy","setSortBy","changeSortKey","e","sortKey","preventDefault","Table","celled","Row","sortable","alias","HeaderCell","onContextMenu","cursor","singleLine","toLocaleUpperCase","substring","Icon","Body","el","sort","i","j","displayName","props","isTableCell","Cell","callback","arg","iconName","title","PatientListPage","setModalOpen","setError","setFilter","closeModal","submitNewPatient","newPatient","isAxiosError","console","position","Container","textAlign","justifyContent","top","right","marginInlineEnd","transition","Input","size","target","marginTop","transform","p","RegExp","to","healthRating","TableCell","replace","b","localeCompare","sensitivity","EntryIcon","HospitalEntry","HealthCheckEntry","OccupationalHealthcareEntry","PatientEntryCard","entry","renderDiagnosesInfo","diagnosisCodes","acc","Fragment","collapsing","compact","index","paddingTop","fitted","forEach","then","catch","log","Card","variant","description","specialist","verticalAlign","healthCheckRating","HealthCheckEntryInfo","discharge","criteria","HospitalEntryInfo","padding","border","borderRadius","employerName","sickLeave","startDate","endDate","OccupationalHealthcareEntryInfo","stringify","assertNever","entryInfo","AddDiagnosisForm","latin","SearchResultsList","results","terms","onAdd","added","List","divided","desc","Item","Description","SearchICDCode","typingTimer","setResults","fetching","setFetching","setAdded","inputRef","useRef","extractResults","rel","codes","subcodes","updateResultsList","document","getElementById","scrollTo","searchResultsFromApi","extracted","existingDiagnoses","keys","includes","addToDiagnoses","ref","autoComplete","onKeyUp","_e","clearTimeout","current","setTimeout","minHeight","maxHeight","overflow","Label","Detail","window","AddDiagnosisModal","Tab","panes","menuItem","render","Pane","renderActiveOnly","SelectHealthRating","k","AddEntryForm","searchQuery","setSearchQuery","searchModalOpen","setSearchModalOpen","onSubmitDiagnosis","res","d","exists","currentTarget","parentElement","lastElementChild","textContent","toLowerCase","classList","add","remove","query","Healthy","href","marginLeft","marginRight","AddPatientEntry","PatientInfo","patientId","useParams","entryModalOpen","setEntryModalOpen","patientModalOpen","setPatientModalOpen","specialEntryKeys","setInitialValues","confirm","setConfirm","history","useHistory","entriesFilter","setEntriesFilter","entryActions","onEditEntry","openConfirm","onDeleteEntry","closeConfirm","patientActions","onEditPatient","onDeletePatient","push","openEntryModal","closeEntryModal","closePatientModal","content","onConfirm","onSubmitEntry","newEntry","onSubmitPatient","submittedPatient","finally","gap","Select","clearable","et","Loader","active","CardGroup","onEdit","onDelete","renderPatientEntries","Confirm","DiagnosisListPage","modalInitialValues","setModalInitialValues","loadValuesToModal","deleteDiagnosis","openModal","submitDiagnosis","newDiagnosis","fetchDiagnosisList","diagnosisListFromApi","overflowY","margin","numeric","AuthenticationForm","formType","setFormType","register","innerRef","UserInfo","setUser","r","App","refreshHandler","storedToken","localStorage","getItem","addEventListener","clearScheduledTimeouts","fetchPatientList","exp","when","Math","max","now","handle","fresh","toString","scheduleRefreshToken","t","setItem","removeItem","array","submitCredentials","authLogin","success","exitApp","status","Link","primary","secondary","height","alignItems","basic","Divider","hidden","path","exact","Message","warning","info","onDismiss","bottom","ReactDOM","patientsReducer","diagnosesReducer","authReducer","schedulerReducer","messageReducer"],"mappings":"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","file":"static/js/main.23f598e7.chunk.js","sourcesContent":["export const apiBaseUrl = process.env.REACT_APP_BACKEND_API_URL ?? 'https://localhost:3001/api';\r\n","import axios from 'axios';\r\nimport { apiBaseUrl } from '../constants';\r\n\r\naxios.defaults.baseURL = apiBaseUrl;\r\naxios.defaults.withCredentials = true;\r\n\r\nexport const setAuthToken = (token: string | null | undefined) => {\r\n    axios.defaults.headers.common = { 'Authorization': `Bearer ${token || ''}` };\r\n};\r\n\r\nexport const clearAuthToken = () => {\r\n    axios.defaults.headers.common = { ...axios.defaults.headers.common, 'Authorization' : 'Bearer ' };\r\n};\r\n\r\nexport default axios;","export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport interface Discharge {\r\n  date: string,\r\n  criteria: string\r\n}\r\n\r\nexport enum EntryType {\r\n  HealthCheckEntry = \"HealthCheck\",\r\n  HospitalEntry = \"Hospital\",\r\n  OccupationalHealthcareEntry = \"OccupationalHealthcare\"\r\n}\r\n\r\nexport interface SickLeave {\r\n  startDate: string,\r\n  endDate: string\r\n}\r\n\r\ninterface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  diagnosisCodes?: Array<Diagnosis['code']>,\r\n  type: string\r\n}\r\n\r\nexport enum HealthCheckRating {\r\n  \"Healthy\" = 0,\r\n  \"LowRisk\" = 1,\r\n  \"HighRisk\" = 2,\r\n  \"CriticalRisk\" = 3,\r\n  \"Undetermined\" = -1\r\n}\r\n\r\nexport interface HealthCheckEntry extends BaseEntry {\r\n  type: EntryType.HealthCheckEntry,\r\n  healthCheckRating: HealthCheckRating,\r\n}\r\n\r\nexport interface HospitalEntry extends BaseEntry {\r\n  type: EntryType.HospitalEntry,\r\n  discharge: Discharge\r\n}\r\n\r\nexport interface OccupationalHealthcareEntry extends BaseEntry {\r\n  type: EntryType.OccupationalHealthcareEntry\r\n  employerName: string,\r\n  sickLeave?: SickLeave\r\n}\r\n\r\nexport type Entry = HospitalEntry | OccupationalHealthcareEntry | HealthCheckEntry;\r\n\r\nexport type EditEntry  = Entry & { id: string };\r\n\r\nexport type Patient = {\r\n  id: string,\r\n  name: string,\r\n  ssn: string,\r\n  dateOfBirth: string,\r\n  gender: Gender,\r\n  occupation: string,\r\n  entries: Entry[],\r\n  healthRating: HealthCheckRating\r\n};\r\n\r\nexport interface AccessToken {\r\n  token: string,\r\n  exp: number,\r\n  iat: number,\r\n  id: string,\r\n  username: string,\r\n  name?: string,\r\n  roles: [string]\r\n}\r\n\r\nexport interface User {\r\n  id: string,\r\n  name?: string,\r\n  username: string,\r\n  password: string,\r\n  createdAt: number,\r\n  roles: [string]\r\n}\r\n\r\nexport type Auth = AccessToken | null;\r\n\r\nexport enum MessageVariation {\r\n  error = 'error',\r\n  info = 'info',\r\n  warning = 'warning',\r\n  success = 'success'\r\n}\r\n\r\nexport interface Message {\r\n  text: {\r\n    header?: string,\r\n    content?: string\r\n  },\r\n    type: MessageVariation,\r\n    show: boolean\r\n}","import { Patient } from '../types/types';\r\nimport axios from './';\r\n\r\nexport const fetchPatients = async (): Promise<Patient[]> => {\r\n    const response = await axios.get<Patient[]>(\r\n        '/patients',\r\n    );\r\n    return response.data;\r\n};\r\n\r\nexport const fetchPatient = async (id: string): Promise<Patient | undefined> => {\r\n    const { data } = await axios.get<Patient>(`/patients/${id}`);\r\n    return data;\r\n};\r\n\r\nexport default {\r\n    fetchPatients,\r\n    fetchPatient\r\n};","import axios from './';\r\n\r\ninterface IUserInfo {\r\n    id: string,\r\n    username: string,\r\n    name?: string,\r\n    roles: [{ name: string, id: string }]\r\n}\r\n\r\nexport const fetchUsers = async (): Promise<IUserInfo[]> => {\r\n    const response = await axios.get<IUserInfo[]>(\r\n        '/users',\r\n    );\r\n    return response.data;\r\n};\r\n\r\nexport const fetchUser = async (id: string): Promise<IUserInfo | undefined> => {\r\n    const { data } = await axios.get<IUserInfo>(`/users/${id}`);\r\n    return data;\r\n};\r\n\r\nexport default {\r\n    fetchUsers,\r\n    fetchUser\r\n};","import axios, { clearAuthToken, setAuthToken } from './';\r\nimport { Auth, User } from \"../types/types\";\r\n\r\nconst decodeAccessToken = (token: string): Auth => {\r\n    // token format: header.payload.signature\r\n    // capture payload\r\n    const accessToken = /^.+\\.(.+)\\..+$/.exec(token);\r\n    return accessToken && accessToken.length === 2\r\n        ? {\r\n            token,\r\n            ...JSON.parse(atob(accessToken[1])) // decode url64 string\r\n          } as Auth\r\n        : null;\r\n};\r\n\r\nexport const loginUser = async (username: string, password: string): Promise<Auth> => {\r\n    const response = await axios.post<string>(\r\n        '/auth',\r\n        { username, password },\r\n    );\r\n    const accessToken = decodeAccessToken(response.data);\r\n    setAuthToken(accessToken?.token);\r\n    return accessToken;\r\n};\r\n\r\nexport const logoutUser = async (userId: string) => {\r\n    const response = await axios.delete(\r\n        '/auth',\r\n        {\r\n            data: { id: userId }\r\n        }\r\n    );\r\n    clearAuthToken();\r\n    return response;\r\n};\r\n\r\nexport const registerUser = async (username: string, password: string, name?: string, roles?: string[]): Promise<User> => {\r\n    const response = await axios.post<User>(\r\n        '/users',\r\n        { username, password, name, roles },\r\n    );\r\n    const user = response.data;\r\n    return user;\r\n};\r\n\r\nexport const refreshAccessToken = async (): Promise<Auth> => {\r\n    const response = await axios.put<string>('/auth');\r\n    return decodeAccessToken(response.data);\r\n};\r\n\r\nexport const scheduleRefreshToken = (accessToken: Auth, callback: (token: Auth) => void): NodeJS.Timeout | undefined => {\r\n    if(!accessToken || new Date(accessToken.exp*1000) < new Date()) return undefined;\r\n    const when = Math.max(accessToken.exp*1000 - Date.now() - 10*1000, 0); // 10 secs before token expiration\r\n    const handle = setTimeout(\r\n        () => {\r\n            void refreshAccessToken()\r\n                .then(fresh => {\r\n                    callback(fresh);\r\n                    console.log(`refreshed access token on ${new Date().toString()}`);\r\n                    //localStorage.setItem('auth', JSON.stringify(fresh));\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    return undefined;\r\n                });\r\n        },\r\n        when\r\n    );\r\n    console.log(`access token refresh scheduled to run in ${when/1000} seconds [${new Date(Date.now() + when).toString()}]`);\r\n    return handle;\r\n};","import axios from './axios';\r\nexport * from './patients';\r\nexport * from './users';\r\nexport * from './auth';\r\nexport * from './axios';\r\nexport default axios;","import { Patient } from \"../../types/types\";\r\nimport { PatientsAction } from \"../actions/patients\";\r\n\r\nexport interface PatientsState {\r\n    [id: string]: Patient\r\n}\r\n\r\nconst initialState = {};\r\n\r\nexport const reducer = (state: PatientsState = initialState, action: PatientsAction): PatientsState => {\r\n    switch (action.type) {\r\n        case \"SET_PATIENT_LIST\":\r\n            return action.payload.reduce(\r\n                (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n                {}\r\n            );\r\n        case \"ADD_PATIENT\":\r\n            return Object.assign({}, state, { [action.payload.id]: action.payload });\r\n        case \"REMOVE_PATIENT\":\r\n            return Object.fromEntries(Object.entries(state).filter(([key,]) => key !== action.payload));\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Diagnosis } from \"../../types/types\";\r\nimport { DiagnosesAction } from \"../actions/diagnoses\";\r\n\r\nexport interface DiagnosesState {\r\n    [code: string]: Diagnosis\r\n}\r\n\r\nconst initialState = {};\r\n\r\nexport const reducer = (state: DiagnosesState = initialState, action: DiagnosesAction): DiagnosesState => {\r\n    switch (action.type) {\r\n        case 'SET_DIAGNOSIS_LIST':\r\n            return action.payload.reduce(\r\n                (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\r\n                {}\r\n            );\r\n        case 'ADD_DIAGNOSIS':\r\n            return Object.assign({}, state, { [action.payload.code]: action.payload });\r\n        case 'REMOVE_DIAGNOSIS':\r\n            return Object.fromEntries(Object.entries(state).filter(([key,]) => key !== action.payload));\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Auth } from \"../../types/types\";\r\nimport { AuthAction } from \"../actions/auth\";\r\n\r\nexport type AuthState = Auth | null;\r\n\r\nconst initialState = null;\r\n\r\nexport const reducer = (state: Auth = initialState, action: AuthAction): AuthState => {\r\n    switch(action.type) {\r\n        case \"LOGIN\":\r\n            return action.payload;\r\n        case \"LOGOUT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { SchedulerAction } from \"../actions/scheduler\";\r\n\r\nexport type SchedulerState = NodeJS.Timeout[];\r\n\r\nconst initialState = [] as NodeJS.Timeout[];\r\n\r\nexport const reducer = (state: SchedulerState = initialState, action: SchedulerAction): SchedulerState => {\r\n    switch(action.type) {\r\n        case \"ADD_SCHEDULED\":\r\n            return [...state, action.payload];\r\n        case \"REMOVE_SCHEDULED\":\r\n            return state.slice(1);\r\n        case \"REMOVE_ALL_SCHEDULED\":\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Message } from \"../../types/types\";\r\nimport { MessageAction } from \"../actions/message\";\r\n\r\nexport type MessageState = Message | null;\r\n\r\nconst initialState = null;\r\n\r\nexport const reducer = (state: MessageState = initialState, action: MessageAction): MessageState => {\r\n    switch(action.type) {\r\n        case \"DISPLAY_MESSAGE\":\r\n            return {\r\n                ...action.payload,\r\n                show: true\r\n            };\r\n        case \"CLEAR_MESSAGE\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Action } from \"./actions\";\r\nimport { AuthState } from \"./reducers/auth\";\r\nimport { DiagnosesState } from \"./reducers/diagnoses\";\r\nimport { MessageState } from \"./reducers/message\";\r\nimport { PatientsState } from \"./reducers/patients\";\r\nimport { SchedulerState } from \"./reducers/scheduler\";\r\n\r\nexport interface State {\r\n  patients: PatientsState;\r\n  diagnoses: DiagnosesState;\r\n  auth: AuthState,\r\n  scheduler: SchedulerState,\r\n  message: MessageState\r\n}\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  diagnoses: {},\r\n  auth: null,\r\n  scheduler: [] as NodeJS.Timeout[],\r\n  message: null\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import { Patient } from \"../../types/types\";\r\n\r\nexport type PatientsAction = \r\n    {\r\n        type: \"SET_PATIENT_LIST\";\r\n        payload: Patient[];\r\n    }\r\n    |\r\n    {\r\n        type: \"ADD_PATIENT\";\r\n        payload: Patient;\r\n    }\r\n    |\r\n    {\r\n        type: 'REMOVE_PATIENT'\r\n        payload: string\r\n    };\r\n\r\nexport const setPatientList = (list: Patient[]): PatientsAction => {\r\n    return {\r\n        type: 'SET_PATIENT_LIST',\r\n        payload: list\r\n    };\r\n};\r\n  \r\nexport const addPatient = (patient: Patient): PatientsAction => {\r\n    return {\r\n        type: 'ADD_PATIENT',\r\n        payload: patient\r\n    };\r\n};\r\n  \r\nexport const removePatient = (id: string): PatientsAction => {\r\n    return {\r\n        type: 'REMOVE_PATIENT',\r\n        payload: id\r\n    };\r\n};","import { Diagnosis } from \"../../types/types\";\r\n\r\nexport type DiagnosesAction = \r\n    {\r\n        type: 'ADD_DIAGNOSIS';\r\n        payload: Diagnosis;\r\n    }\r\n    |\r\n    {\r\n        type: 'SET_DIAGNOSIS_LIST';\r\n        payload: Diagnosis[];\r\n    }\r\n    |\r\n    {\r\n        type: 'REMOVE_DIAGNOSIS',\r\n        payload: string\r\n    };\r\n\r\nexport const setDiagnosisList = (list: Diagnosis[]): DiagnosesAction => {\r\n    return {\r\n        type: 'SET_DIAGNOSIS_LIST',\r\n        payload: list\r\n    };\r\n};\r\n    \r\nexport const addDiagnosis = (diagnosis: Diagnosis): DiagnosesAction => {\r\n    return {\r\n        type: 'ADD_DIAGNOSIS',\r\n        payload: diagnosis\r\n    };\r\n};\r\n    \r\nexport const removeDiagnosis = (code: string): DiagnosesAction => {\r\n    return {\r\n        type: 'REMOVE_DIAGNOSIS',\r\n        payload: code\r\n    };\r\n};","import { Auth } from \"../../types/types\";\r\n\r\nexport type AuthAction =\r\n    {\r\n        type: 'LOGIN',\r\n        payload: Auth\r\n    }\r\n    |\r\n    {\r\n        type: 'LOGOUT'\r\n    };\r\n\r\nexport const loginUser = (auth: Auth): AuthAction => {\r\n    return {\r\n        type: 'LOGIN',\r\n        payload: auth\r\n    };\r\n};\r\n    \r\nexport const logoutUser = (): AuthAction => {\r\n    return {\r\n        type: 'LOGOUT'\r\n    };\r\n};","import { Message } from \"../../types/types\";\r\n\r\nexport type MessageAction =\r\n    {\r\n        type: 'DISPLAY_MESSAGE',\r\n        payload: Omit<Message, 'show'>\r\n    }\r\n    |\r\n    {\r\n        type: 'CLEAR_MESSAGE'\r\n    };\r\n\r\nexport const displayMessage = (msg: Omit<Message, 'show'>): MessageAction => {\r\n    return {\r\n        type: \"DISPLAY_MESSAGE\",\r\n        payload: msg\r\n    };\r\n};\r\n  \r\nexport const clearMessage = (): MessageAction => {\r\n    return {\r\n        type: 'CLEAR_MESSAGE'\r\n    };\r\n};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form, FormikProps } from \"formik\";\r\nimport { TextField } from '../FormFields';\r\n\r\nexport type AuthenticationFormValues = {\r\n    username: string,\r\n    password: string,\r\n    name?: string\r\n};\r\n\r\nenum AuthenticationFormFunction {\r\n    'auth' = 'auth',\r\n    'register' = 'register'\r\n}\r\n\r\ninterface Props {\r\n  type?: AuthenticationFormFunction,\r\n  onSubmit: {\r\n    [key in AuthenticationFormFunction]: (values: AuthenticationFormValues) => void;\r\n   } // on submit callback\r\n}\r\n\r\nconst AuthenticationForm = ( { onSubmit, type = AuthenticationFormFunction.auth }: Props ) => {\r\n    const [formType, setFormType] = useState(type);\r\n    const ref = useRef<FormikProps<AuthenticationFormValues>>(null);\r\n    \r\n    useEffect(() => {\r\n      if(onSubmit[formType] === undefined) {\r\n        throw new Error(`Function for ${formType} must be provided`);\r\n        //console.error(`Function for ${formType} must be provided`);\r\n      }\r\n      // clear form fields on form type change\r\n      if(ref.current) {\r\n        ref.current.values.username = '';\r\n        ref.current.values.password = '';\r\n        ref.current.values.name = '';\r\n      }\r\n      \r\n    }, [formType]);\r\n    \r\n    const formHeader = () => {\r\n        return (\r\n            <h3>\r\n                <a\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        formType !== AuthenticationFormFunction.auth && setFormType(AuthenticationFormFunction.auth);\r\n                    }}\r\n                    href={formType !== AuthenticationFormFunction.auth ? \"\" : undefined}\r\n                    style={{ ...formType === AuthenticationFormFunction.auth && { color: \"black\" } }}\r\n                >\r\n                    Login\r\n                </a>\r\n                &nbsp;or&nbsp;\r\n                <a\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        formType !== AuthenticationFormFunction.register && setFormType(AuthenticationFormFunction.register);\r\n                    }}\r\n                    href={formType !== AuthenticationFormFunction.register ? \"\" : undefined}\r\n                    style={{ ...formType === AuthenticationFormFunction.register && { color: \"black\" } }}\r\n                >\r\n                    Register\r\n                </a>\r\n            </h3>\r\n        );\r\n    };\r\n    \r\n    return (\r\n    <React.Fragment>\r\n        {formHeader()}\r\n        <Formik\r\n          innerRef={ref}\r\n          initialValues={\r\n              {\r\n                  username: \"\",\r\n                  password: \"\",\r\n                  //...(formType === AuthenticationFormFunction.register && { name: \"\" }),\r\n                  name: \"\"\r\n              }\r\n          }\r\n          onSubmit={onSubmit[formType]}\r\n          validate={values => {\r\n              const requiredError = \"Field is required\";\r\n              const errors: { [field: string]: string } = {};\r\n              if (!values.username) {\r\n              errors.username = requiredError;\r\n              }\r\n              if (!values.password) {\r\n              errors.password = requiredError;\r\n              }\r\n              return errors;\r\n          }}\r\n        >\r\n        {({ isValid, dirty }) => {\r\n          return (\r\n            <Form className=\"form ui\">\r\n              <Field\r\n                label=\"Username\"\r\n                placeholder=\"Username\"\r\n                name=\"username\"\r\n                component={TextField}\r\n              />\r\n              {\r\n                  formType === AuthenticationFormFunction.register &&\r\n                  <Field\r\n                    label=\"Name\"\r\n                    placeholder=\"Name\"\r\n                    name=\"name\"\r\n                    component={TextField}\r\n                  />\r\n              }\r\n              <Field\r\n                label=\"Password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <Grid>\r\n                <Grid.Column width={5}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"green\"\r\n                    disabled={!dirty || !isValid}\r\n                  >\r\n                    {formType === AuthenticationFormFunction.auth ? 'Login' : 'Register'}\r\n                  </Button>\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AuthenticationForm;\r\n","import { Field } from 'formik';\r\nimport React from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { Gender } from '../../types/types';\r\n\r\n// structure of a single gender option\r\nexport type GenderOption = {\r\n    value: Gender;\r\n    label: string;\r\n};\r\n  \r\n// props for gender select field component\r\ntype SelectGenderProps = {\r\n    name: string;\r\n    label: string;\r\n    options: GenderOption[];\r\n};\r\n  \r\n  // gender select component\r\nexport const SelectGender = ({\r\n    name,\r\n    label,\r\n    options\r\n}: SelectGenderProps) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n            {options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label || option.value}\r\n                </option>\r\n             ))}\r\n        </Field>\r\n    </Form.Field>\r\n);","import React from 'react';\r\nimport { ErrorMessage, Field, FieldProps } from 'formik';\r\nimport { Form } from 'semantic-ui-react';\r\n\r\n// input field\r\nexport interface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n    type?: string;\r\n}\r\n  \r\nexport const TextField = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    type\r\n}: TextProps) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field type={type} placeholder={placeholder} {...field} />\r\n        <div style={{ color:'red' }}>\r\n            <ErrorMessage name={field.name} />\r\n        </div>\r\n    </Form.Field>\r\n);","import { ErrorMessage, Field, FormikProps } from 'formik';\r\nimport React, { useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { TextProps } from './';\r\n\r\n// date picker\r\nexport interface DateProps extends TextProps {\r\n    dateFormatter: (date: string | Date) => string,\r\n    setFieldValue: FormikProps<{ date: string | Date }>[\"setFieldValue\"];\r\n    setFieldTouched: FormikProps<{ date: string | Date }>[\"setFieldTouched\"];\r\n}\r\n  \r\n  // formats date to YYYY-MM-DD string for HTML date picker attribute\r\nexport const formatDate = (date: string | Date): string => {\r\n    if(!date || !(String(date)).trim().length) {\r\n      return '';\r\n    }\r\n    if(typeof date === 'string' || date instanceof Date) {\r\n      if(Number.isNaN(Date.parse(date as string))) {\r\n        throw new Error('Invalid date');\r\n      }\r\n      const parts = new Date(date).toLocaleDateString('en-us', { year: 'numeric', month: '2-digit', day: '2-digit' }).split('/');\r\n      return `${parts[2]}-${parts[0]}-${parts[1]}`;\r\n    }\r\n    else {\r\n      throw new Error('Date must be of type string or Date');\r\n    }\r\n};\r\n  \r\n// date picker field component\r\nexport const DateField = ({\r\n    field,\r\n    label,\r\n    placeholder,\r\n    dateFormatter = formatDate,\r\n    setFieldTouched,\r\n    setFieldValue\r\n}: DateProps) => {\r\n  \r\n    useEffect(() => { // initialize date from field prop\r\n      if(field.value !== undefined || field.value !== null) {\r\n        setFieldValue(field.name, dateFormatter(field.value as string));\r\n        setFieldTouched(field.name, false);\r\n      }\r\n    }, []);\r\n  \r\n    useEffect(() => { // instead of onChange for field prop\r\n      if(!/\\d{1,2}-\\d{1,2}-\\d{4}/g.test(field.value as string)) // do nothing until field is filled in\r\n        return;\r\n      setFieldValue(field.name, dateFormatter(field.value as string));\r\n      setFieldTouched(field.name, true);\r\n    }, [field.value]);\r\n  \r\n    return (\r\n        <Form.Field>\r\n            <label>{label}</label>\r\n            <Field type=\"date\" placeholder={placeholder} {...field} />\r\n            <div style={{ color:'red' }}>\r\n                <ErrorMessage name={field.name} />\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};","import { ErrorMessage, FieldInputProps, FormikProps } from 'formik';\r\nimport React from 'react';\r\nimport { Dropdown, DropdownOnSearchChangeData, DropdownProps, Form } from 'semantic-ui-react';\r\nimport { Diagnosis } from '../../types/types';\r\n\r\nexport const SelectDiagnosis = ({\r\n    field,\r\n    diagnoses,\r\n    setFieldValue,\r\n    setFieldTouched,\r\n    initialValues,\r\n    onSearchChange\r\n}: {\r\n    field: FieldInputProps<string>;\r\n    diagnoses: Diagnosis[];\r\n    setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n    setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n    initialValues: Array<Diagnosis['code']>;\r\n    onSearchChange?: (e: React.SyntheticEvent<HTMLElement, Event>, d: DropdownOnSearchChangeData) => void\r\n}) => {\r\n  \r\n    const onChange = (\r\n        _event: React.SyntheticEvent<HTMLElement, Event>,\r\n        data: DropdownProps\r\n    ) => {\r\n        setFieldTouched(field.name, true);\r\n        setFieldValue(field.name, data.value);\r\n    };\r\n  \r\n    const stateOptions = diagnoses.map(diagnosis => ({\r\n        key: diagnosis.code,\r\n        text: `${diagnosis.name} (${diagnosis.code})`,\r\n        value: diagnosis.code\r\n    }));\r\n  \r\n    return (\r\n        <Form.Field>\r\n            <label>Diagnoses</label>\r\n            <Dropdown\r\n                fluid\r\n                multiple\r\n                search\r\n                selection\r\n                options={stateOptions}\r\n                onChange={onChange}\r\n                defaultValue={initialValues || undefined}\r\n                onSearchChange={onSearchChange}\r\n        />\r\n            <ErrorMessage name={field.name} />\r\n      </Form.Field>\r\n    );\r\n};","import { FieldInputProps, FormikProps, ErrorMessage } from 'formik';\r\nimport React from 'react';\r\nimport { DropdownProps, Form, Dropdown } from 'semantic-ui-react';\r\nimport { EntryType } from '../../types/types';\r\n\r\nexport const SelectEntryType = ({\r\n    field,\r\n    entryTypes,\r\n    setFieldValue,\r\n    setFieldTouched,\r\n    initialValue\r\n}: {\r\n    field: FieldInputProps<string>;\r\n    entryTypes: EntryType[];\r\n    setFieldValue: FormikProps<{ type: string[] }>[\"setFieldValue\"];\r\n    setFieldTouched: FormikProps<{ type: string[] }>[\"setFieldTouched\"];\r\n    initialValue: EntryType\r\n}) => {\r\n  \r\n    const onChange = (\r\n        _event: React.SyntheticEvent<HTMLElement, Event>,\r\n        data: DropdownProps\r\n    ) => {\r\n        setFieldTouched(field.name, true);\r\n        setFieldValue(field.name, data.value);\r\n    };\r\n  \r\n    const entryTypesToOptions = entryTypes.map(type => ({\r\n        key: type,\r\n        text: type.split(/([A-Z][a-z]+)/g).filter(v => v !== '').join(' '),\r\n        value: type\r\n    }));\r\n  \r\n    return (\r\n        <Form.Field>\r\n            <label>Entry type</label>\r\n        <Dropdown\r\n            fluid\r\n            search\r\n            selection\r\n            options={entryTypesToOptions}\r\n            onChange={onChange}\r\n            defaultValue={initialValue || undefined}\r\n        />\r\n            <ErrorMessage name={field.name} />\r\n      </Form.Field>\r\n    );\r\n};","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectGender, GenderOption } from \"../FormFields\";\r\nimport { Gender, Patient } from \"../../types/types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\" | \"healthRating\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n  initialValues?: PatientFormValues;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm = ({ onSubmit, onCancel, initialValues } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        !initialValues\r\n        ?\r\n          {\r\n            name: \"\",\r\n            ssn: \"\",\r\n            dateOfBirth: \"\",\r\n            occupation: \"\",\r\n            gender: Gender.Other\r\n          }\r\n        : initialValues\r\n      }\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectGender\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  { !initialValues ? 'Add' : 'Change' }\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n  initialValues?: PatientFormValues;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error, initialValues }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} initialValues={initialValues} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\nimport '../styles/general.css';\r\nimport { HealthCheckRating } from '../types/types';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n  inlineText?: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n  'Health rating undetermined'\r\n];\r\n\r\nconst undeterminedStyle = {\r\n  opacity: 0.2,\r\n  filter: 'grayscale(100%)'\r\n};\r\n\r\nconst maxRating = HealthCheckRating.CriticalRisk + 1;\r\n\r\nconst HealthRatingBar = ({ rating, showText, inlineText = false }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {rating === HealthCheckRating.Undetermined\r\n        ? <Rating icon=\"heart\" disabled rating={0} maxRating={maxRating} style={undeterminedStyle} />\r\n        : <Rating icon=\"heart\" disabled rating={4 - rating} maxRating={maxRating} />\r\n      }\r\n      \r\n      {showText\r\n        ? <p\r\n            style={{ display: inlineText ? 'inline' : undefined }}\r\n            className={inlineText ? 'health-rating-text-inline' : undefined}\r\n          >\r\n            {HEALTHBAR_TEXTS[rating] || HEALTHBAR_TEXTS[4]}\r\n          </p>\r\n        : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","// knowledge on React generic components from https://stackoverflow.com/a/66052574\r\n\r\nimport React, { ReactElement, SyntheticEvent } from \"react\";\r\nimport { Icon, Table } from \"semantic-ui-react\";\r\nimport { Action } from \"../../types/Action\";\r\n\r\nexport interface GenericAction<T> extends Action {\r\n    arg: keyof T,                   // object key to be used as argument in callback\r\n    callback: (args: any) => void;  // callback function\r\n}\r\n\r\ninterface GenericProps<T> {\r\n    data: Array<\r\n        T |\r\n        { [key in keyof T]: any }\r\n    >,                              // dataset\r\n    header: Array<{                 // table fields\r\n        key: keyof T,               // object key corresponding to field\r\n        sortable: boolean,          // field is sortable\r\n        alias?: string              // string to display in table header (default is key name with first character capitalised)\r\n    }>,\r\n    sortFunc: (key: keyof T|undefined, order: boolean|undefined) => (a: T, b: T) => number, // sort function\r\n    actions?: Array<GenericAction<T>>,  // row actions (edit, delete, etc...)\r\n}\r\n\r\nconst SortableTable = <T,>({ data, header, sortFunc, actions }: GenericProps<T>) => {\r\n    // key = sort key, order = true for asc, false for desc, undefined for none\r\n    const [sortBy, setSortBy] = React.useState<{ key: keyof T|undefined, order: boolean|undefined }>({ key: undefined, order: undefined });\r\n    // sortable header click handler\r\n    const changeSortKey = (e: SyntheticEvent, sortKey: keyof T|undefined) => {\r\n        if(e.type === 'click') {\r\n            setSortBy(v => ({ key: sortKey, order: !v.order ?? true }));\r\n        }\r\n        else if(e.type === 'contextmenu') {\r\n            e.preventDefault();\r\n            setSortBy({ key: undefined, order: undefined });\r\n        }\r\n    };\r\n\r\n    const isTableCell = (el: any) => {\r\n        return el\r\n            ? ((el as ReactElement) as any).type?.name === 'TableCell' || ((el as ReactElement) as any).type?.displayName === 'TableCell' || (el as ReactElement).props?.as === 'td'\r\n            : false;\r\n    };\r\n\r\n    if(!data || !data.length) return null;\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header className='sticky-header'>\r\n                <Table.Row>\r\n                {header.map(({ key, sortable, alias }) =>\r\n                    <Table.HeaderCell\r\n                        key={key as string}\r\n                        onClick={sortable ? (e: SyntheticEvent) => changeSortKey(e, key) : null}\r\n                        onContextMenu={sortable ? (e: SyntheticEvent) => changeSortKey(e, key) : null}\r\n                        style={{ cursor: sortable ? 'pointer' : 'hand' }}\r\n                        singleLine\r\n                    >\r\n                        {alias ?? `${(key as string)[0].toLocaleUpperCase()}${(key as string).substring(1)}`}\r\n                        {sortable &&\r\n                        <Icon\r\n                            name={!sortBy.order ? 'triangle down' : 'triangle up'}\r\n                            style={{ opacity: sortBy.key === key ? (sortBy.key === undefined ? 0 : 1) : 0 }} // hide icon when not sorted by current key\r\n                        />\r\n                        }\r\n                    </Table.HeaderCell>\r\n                )}\r\n                    {actions?.length && <Table.HeaderCell>Actions</Table.HeaderCell> /* actions field */}\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n            {data\r\n                .map(el => el).sort(sortFunc(sortBy.key, sortBy.order)) // sort copy of dataset so that we can revert back to the original dataset\r\n                .map((el, i) => (\r\n                    <Table.Row key={`row_${i}`}>\r\n                        {header.map(({ key }, j) => isTableCell(el[key])\r\n                            ? {...el[key], ...(!(el[key] as ReactElement).key && { key : `cell_${i}${j}` /* add element key if missing*/})}\r\n                            : <Table.Cell key={`cell_${i}${j}`}>{el[key] ?? ''}</Table.Cell>\r\n                        )}\r\n                        {actions?.length &&\r\n                        <Table.Cell singleLine>\r\n                            <div>\r\n                            {actions.map(a =>\r\n                                <div\r\n                                    key={`cell_${i}${header.length}_action_${a.label}`}\r\n                                    style={{ display: 'inline-block', cursor: 'pointer' }}\r\n                                    onClick={() => { a.callback(el[a.arg]); }}\r\n                                >\r\n                                    <Icon name={a.iconName} title={a.label}/>\r\n                                </div>)\r\n                            }\r\n                            </div>\r\n                        </Table.Cell>}\r\n                    </Table.Row>\r\n                    )\r\n                )\r\n            }\r\n            </Table.Body>\r\n        </Table>\r\n    );\r\n};\r\n\r\nexport default SortableTable;","import React, { ReactElement } from \"react\";\r\nimport axios from \"../../controllers\";\r\nimport { Container, TableCell, Button, Icon, Input } from \"semantic-ui-react\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { HealthCheckRating, Patient } from \"../../types/types\";\r\nimport { apiBaseUrl } from \"../../constants\";\r\nimport HealthRatingBar from \"../../components/HealthRatingBar\";\r\nimport { useStateValue } from \"../../state\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { addPatient } from \"../../state/actions/patients\";\r\n\r\nimport SortableTable from \"../SortableTable\";\r\n\r\nconst PatientListPage = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n  const [filter, setFilter] = React.useState<{ value: string, show: boolean }>({value: '', show: false});\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch(addPatient(newPatient));\r\n      closeModal();\r\n    }\r\n    catch(e) {\r\n      if(axios.isAxiosError(e)) {\r\n        console.error(e.response?.data || 'Unknown Error');\r\n        setError(e.response?.data?.error as string || 'Unknown error');\r\n      }\r\n    }\r\n  };\r\n\r\n  const sortFunc = (key: keyof Patient|undefined, order: boolean|undefined): (a: Patient|any, b: Patient|any) => number => {\r\n    return (a, b): number => {\r\n      if(key === undefined) return 0;\r\n      if(!a[key] || !b[key]) return 0;\r\n\r\n      if(typeof a[key] === 'string') return (a[key] as string).localeCompare(b[key], 'en', { sensitivity: 'base' }) * (order ? 1 : -1);\r\n      if(typeof a[key] === 'number') return ((a[key] as number) - (b[key] as number)) * (order ? 1 : -1);\r\n\r\n      if(((a[key] as ReactElement) as any).type?.name === 'Link' || ((a[key] as ReactElement) as any).type?.displayName === 'Link')\r\n          return ((a[key] as ReactElement).props.children as string).localeCompare((b[key] as ReactElement).props.children as string, 'en', { sensitivity: 'base' }) * (order ? 1 : -1);\r\n      if(((a[key] as ReactElement) as any).type?.name === 'TableCell' || ((a[key] as ReactElement) as any).type?.displayName === 'TableCell')\r\n          return ((a[key] as ReactElement).props.children.props.rating - (b[key] as ReactElement).props.children.props.rating) * (order ? 1 : -1);\r\n\r\n      return 0;\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ position: 'relative' }}>\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n\r\n      {/* patient filter tool */}\r\n      <div style={{ width: '100%', display: 'inline-flex', justifyContent: 'flex-end', position: 'absolute', top: '-.25rem', right: '0' }}>\r\n        <div style={{ display: 'inline-block', opacity: Number(filter.show), width: '25%', marginInlineEnd: '.25em', transition: '.2s' }}>\r\n          <Input\r\n            value={filter.value}\r\n            fluid\r\n            size=\"small\"\r\n            placeholder=\"filter by name\"\r\n            onChange={e => setFilter({ ...filter, value: e.target.value })}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{ display: 'inherit', opacity: Number(filter.show), cursor: filter.value ? 'pointer' : 'auto' }}\r\n          onClick={() => filter.value && setFilter({ ...filter, value: '' })}\r\n          title=\"clear filter\"\r\n        >\r\n          <Icon name=\"close\" inverted={!filter.value} color={filter.value === '' ? 'grey' : 'black'} style={{ marginTop: '.5em' }}/>\r\n        </div>\r\n        <div\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => setFilter({ ...filter, show: !filter?.show })}\r\n          title={`filtering is ${filter.value ? 'on' : 'off'}`}\r\n        >\r\n          <Icon name=\"filter\" inverted={!filter.show} style={{ marginTop: '.5em', transform: `scale(${filter.show ? 1 : 0.8})`, transition: '.2s' }} color={filter.value === '' ? 'grey' : 'black'}/>\r\n        </div>\r\n      </div>\r\n\r\n      <SortableTable<Patient>\r\n        data={Object.values(patients)\r\n          .filter(p => new RegExp(filter.value, 'i').test(p.name))\r\n          .map(p => ({\r\n            ...p,\r\n            name: <Link to={`/patients/${p.id}`}>{p.name}</Link>,\r\n            healthRating:\r\n              <TableCell title={HealthCheckRating[p.healthRating].replace(/([a-z])([A-Z])/g, '$1 $2')}>\r\n                <HealthRatingBar showText={false} rating={p.healthRating}/>\r\n              </TableCell>\r\n          }))\r\n        }\r\n        header={[\r\n          { key: 'name', sortable: true },\r\n          { key: 'gender', sortable: false },\r\n          { key: 'occupation', sortable: true },\r\n          { key: 'healthRating', sortable: true, alias: 'Health Rating' },\r\n        ]}\r\n        sortFunc={sortFunc}\r\n      />\r\n\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","import axios from '../controllers';\r\nimport React, { useEffect } from 'react';\r\nimport { Card, Icon, SemanticICONS, Table } from 'semantic-ui-react';\r\nimport { apiBaseUrl } from '../constants';\r\nimport { useStateValue } from '../state';\r\nimport { Action } from '../types/Action';\r\nimport { Diagnosis, Entry, EntryType, HealthCheckEntry, HospitalEntry, OccupationalHealthcareEntry } from '../types/types';\r\nimport HealthRatingBar from './HealthRatingBar';\r\n\r\nimport '../styles/general.css';\r\nimport { addDiagnosis } from '../state/actions/diagnoses';\r\n\r\ninterface Props {\r\n    entry: Entry,\r\n    actions: EntryAction[],\r\n    onEdit?: (entry: Entry) => void,\r\n    onDelete?: (entry: Entry) => void\r\n}\r\n\r\nexport interface EntryAction extends Action {\r\n    callback: (entry: Entry) => void;\r\n}\r\n\r\nexport const EntryIcon: { [key: string]: SemanticICONS } = {\r\n    [EntryType.HospitalEntry]: 'hospital',\r\n    [EntryType.HealthCheckEntry]: 'doctor',\r\n    [EntryType.OccupationalHealthcareEntry]: 'stethoscope'\r\n};\r\n\r\nconst PatientEntryCard = ({ entry, actions }: Props) => {\r\n    const [{ diagnoses }, dispatch] = useStateValue();\r\n    \r\n    const assertNever = (value: never): never => {\r\n        throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\r\n    };\r\n\r\n    const allDiagnosisInfoAvailable = (): boolean => {\r\n        return entry.diagnosisCodes\r\n            ? entry.diagnosisCodes.reduce((acc: boolean, code) => acc && (diagnoses[code] !== undefined), true)\r\n            : false;\r\n    };\r\n\r\n    const renderDiagnosesInfo = () => {\r\n        if(!entry.diagnosisCodes || !entry.diagnosisCodes.length || !allDiagnosisInfoAvailable()) {\r\n            return null;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <h4>Diagnosis</h4>\r\n                <Table collapsing compact singleLine={false} className=\"no-border no-padding-left medium-line-height\">\r\n                    <Table.Body>\r\n                        {entry.diagnosisCodes?.map((code, index) =>\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell style={{ paddingTop: '.3em' }}><Icon fitted name=\"circle\" size=\"tiny\"/></Table.Cell>\r\n                                <Table.Cell>{code}</Table.Cell>\r\n                                <Table.Cell>{diagnoses[code].name}</Table.Cell>\r\n                            </Table.Row>\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const HealthCheckEntryInfo = (entry: HealthCheckEntry) => {\r\n        return (\r\n            <>\r\n                <h2>{entry.date} <Icon name={EntryIcon[entry.type]} title=\"health check\" /></h2>\r\n                <p><em>{entry.description}</em></p>\r\n                <Table collapsing compact singleLine={false} className=\"no-border no-padding-left medium-line-height\">\r\n                    <Table.Body>\r\n                        <Table.Row>\r\n                            <Table.Cell>Specialist</Table.Cell>\r\n                            <Table.Cell>{entry.specialist}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row verticalAlign=\"top\">\r\n                            <Table.Cell>Health rating</Table.Cell>\r\n                            <Table.Cell><HealthRatingBar rating={entry.healthCheckRating} showText={true} inlineText/></Table.Cell>\r\n                        </Table.Row>\r\n                    </Table.Body>\r\n                </Table>\r\n                {renderDiagnosesInfo()}\r\n            </>\r\n        );\r\n    };\r\n    \r\n    const OccupationalHealthcareEntryInfo = (entry: OccupationalHealthcareEntry) => {\r\n        return (\r\n            <>\r\n                <h2>\r\n                    {entry.date}&nbsp;\r\n                    <Icon name={EntryIcon[entry.type]} title=\"occupational healthcare\" />&nbsp;\r\n                    <span\r\n                        style={{ padding: '4px', border: '1px solid', borderRadius: '4px', cursor: 'default' }}\r\n                        title=\"employer\">\r\n                        {entry.employerName}\r\n                    </span>\r\n                </h2>\r\n                <p><em>{entry.description}</em></p>\r\n                <Table collapsing compact singleLine={false} className=\"no-border no-padding-left medium-line-height\">\r\n                    <Table.Body>\r\n                        <Table.Row>\r\n                            <Table.Cell>Specialist</Table.Cell>\r\n                            <Table.Cell>{entry.specialist}</Table.Cell>\r\n                        </Table.Row>\r\n                        {entry.sickLeave &&\r\n                            <Table.Row>\r\n                                <Table.Cell>Sick leave</Table.Cell>\r\n                                <Table.Cell>{entry.sickLeave?.startDate} &mdash; {entry.sickLeave?.endDate}</Table.Cell>\r\n                            </Table.Row>\r\n                        }\r\n                    </Table.Body>\r\n                </Table>\r\n                {renderDiagnosesInfo()}\r\n            </>\r\n        );\r\n    };\r\n    \r\n    const HospitalEntryInfo = (entry: HospitalEntry) => {\r\n        return (\r\n            <>\r\n                <h2>{entry.date} <Icon name={EntryIcon[entry.type]} title=\"hospital admission\"/></h2>\r\n                <p><em>{entry.description}</em></p>\r\n                <Table collapsing compact singleLine={false} className=\"no-border no-padding-left medium-line-height\">\r\n                    <Table.Body>\r\n                        <Table.Row>\r\n                            <Table.Cell>Specialist</Table.Cell>\r\n                            <Table.Cell>{entry.specialist}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                            <Table.Cell>Discharged on</Table.Cell>\r\n                            <Table.Cell>{entry.discharge.date}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                            <Table.Cell>Discharge criteria</Table.Cell>\r\n                            <Table.Cell>{entry.discharge.criteria}</Table.Cell>\r\n                        </Table.Row>\r\n                    </Table.Body>\r\n                </Table>\r\n                {renderDiagnosesInfo()}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const entryInfo = () => {\r\n        switch (entry.type as string) {\r\n            case EntryType.HealthCheckEntry:\r\n               return HealthCheckEntryInfo(entry as HealthCheckEntry);\r\n            case EntryType.HospitalEntry:\r\n                return HospitalEntryInfo(entry as HospitalEntry);\r\n            case EntryType.OccupationalHealthcareEntry:\r\n                return OccupationalHealthcareEntryInfo(entry as OccupationalHealthcareEntry);\r\n            default:\r\n                return assertNever(entry.type as never);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // fetch diagnosis info and add to state if necessary\r\n        entry.diagnosisCodes?.forEach(code => {\r\n            if(diagnoses[code] === undefined) {\r\n                void axios\r\n                    .get<Diagnosis>(`${apiBaseUrl}/diagnoses/${code}`)\r\n                    .then(response => {\r\n                        if(response.data) {\r\n                            dispatch(addDiagnosis(response.data));\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                    });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    if(!entry) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Card variant=\"outlined\" fluid>\r\n            <Card.Content>\r\n                {entryInfo()}\r\n                <div\r\n                    style={{ display: 'inline-flex', width: 'max-content', position: 'absolute', top: '1.25rem', right: '.5rem', /*cursor: 'pointer'*/ }}\r\n                >\r\n                    {actions.map(a => \r\n                        <div key={`${a.label}`} onClick={() => a.callback(entry)} style={{ cursor: 'pointer' }}>\r\n                            <Icon name={a.iconName} title={a.label} />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PatientEntryCard;","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField } from '../FormFields';\r\nimport { Diagnosis } from \"../../types/types\";\r\n\r\nexport type DiagnosisFormValues = Diagnosis;\r\n\r\ninterface Props {\r\n  onSubmit: (values: DiagnosisFormValues) => void; // on submit callback\r\n  onCancel: () => void; // on cancel callback\r\n  initialValues: Diagnosis | undefined // initial values for form fields\r\n}\r\n\r\nexport const AddDiagnosisForm = ({ onSubmit, onCancel, initialValues } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        initialValues === undefined\r\n        ? {\r\n            code: \"\",\r\n            name: \"\",\r\n            latin: \"\"\r\n        }\r\n        : initialValues\r\n      }\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.code) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.name) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Code\"\r\n              placeholder=\"Code\"\r\n              name=\"code\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Latin\"\r\n              placeholder=\"Latin\"\r\n              name=\"latin\"\r\n              component={TextField}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  {initialValues === undefined ? 'Add' : 'Change'}\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddDiagnosisForm;\r\n","import React from \"react\";\r\nimport { List, Button } from \"semantic-ui-react\";\r\nimport { SearchResults } from \".\";\r\n\r\ninterface ISearchResultsList {\r\n    results: SearchResults;\r\n    onAdd: (result: { name: string, desc: string }, i: number) => void;\r\n    added: Array<boolean>;\r\n}\r\nconst SearchResultsList = ( { results: { terms, results }, onAdd, added }: ISearchResultsList) => {\r\n    return (\r\n        <List divided verticalAlign='middle'>\r\n        {\r\n            results.length > 0\r\n                ? results.map(({ name, desc }, i) =>\r\n                    <List.Item key={`${name}_${i}`}>\r\n                        <List.Content floated='right'>\r\n                            <Button\r\n                                disabled={added[i]}\r\n                                onClick={() => { void onAdd({ name, desc }, i); }}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </List.Content>\r\n                        <List.Header>{name}</List.Header>\r\n                        <List.Description><span>{desc}</span></List.Description>\r\n                    </List.Item>\r\n                )\r\n                : terms !== undefined ? `no results for \"${terms}\"` : null\r\n        }\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default SearchResultsList;","import React, { useState } from 'react';\r\nimport axios from '../../controllers';\r\nimport { apiBaseUrl } from '../../constants';\r\nimport { Form, Segment, Label, SearchResults } from 'semantic-ui-react';\r\nimport { useStateValue } from '../../state';\r\nimport { Diagnosis } from '../../types/types';\r\nimport SearchResultsList from './SearchResultsList';\r\nimport { addDiagnosis } from '../../state/actions/diagnoses';\r\n\r\nexport interface SearchResults {\r\n    terms: string | undefined,\r\n    results: Array<{ name: string, desc: string }>,\r\n    error?: string | undefined\r\n}\r\n\r\ninterface ICDCodeLookupResults {\r\n    /* returned when searching by term */\r\n    terms?: string,\r\n    results?: Array<{ name: string, desc: string }>,\r\n    /* returned when searching by code */\r\n    code?: { name: string, desc: string },\r\n    to?: { codes: Array<{ name: string, desc: string }> }\r\n    subcodes?: Array<{ name: string, desc: string }>\r\n}\r\n\r\nconst SearchICDCode = () => {\r\n    const [{ terms, results, error }, setResults] = useState<SearchResults>({ terms: undefined, results: [], error: undefined });\r\n    const [fetching, setFetching] = useState<boolean>(false);\r\n    const [added, setAdded] = useState<boolean[]>([]);\r\n    const [{ diagnoses }, dispatch] = useStateValue();\r\n    \r\n    // used for debouncing icdcodelookup api calls\r\n    let typingTimer: ReturnType<typeof setTimeout>;\r\n    const inputRef = React.useRef<HTMLInputElement | null>(null);\r\n    const doneTypingInterval = 750;\r\n\r\n    const extractResults = (data: ICDCodeLookupResults): SearchResults => {\r\n        if(data.terms) {\r\n            return {\r\n                results: data?.results?.map(({ name, desc }) => ({ name: name, desc: desc })) || [],\r\n                terms: data.terms\r\n            };\r\n        }\r\n        else if(data.code) {\r\n            const rel = data.to\r\n                ? data.to.codes.map(({ name, desc }: { name: string, desc: string }) => ({ name, desc}))\r\n                : data.subcodes ? data.subcodes.map(({ name, desc }: { name: string, desc: string }) => ({ name, desc})) : [];\r\n            return {\r\n                results: [\r\n                    { name: data.code.name, desc: data.code.desc },\r\n                    ...rel\r\n                ],\r\n                terms: data.code.name\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                terms: undefined,\r\n                results: []\r\n            };\r\n        }\r\n    };\r\n\r\n    const updateResultsList = async (terms: string) => {\r\n        if(terms) {\r\n            document.getElementById('results-div')?.scrollTo(0, 0);\r\n            try {\r\n                setFetching(true);\r\n                const { data: searchResultsFromApi } = await axios.post<SearchResults>(`${apiBaseUrl}/icdclookup`, { terms });\r\n                setFetching(false);\r\n\r\n                const extracted = extractResults(searchResultsFromApi);\r\n                setResults({\r\n                    ...extracted,\r\n                    terms: extracted.terms || terms\r\n                });\r\n\r\n                const existingDiagnoses = Object.keys(diagnoses);\r\n                setAdded(\r\n                    extracted.results \r\n                    ? extracted.results.map(({ name }) => existingDiagnoses.includes(name))\r\n                    : []\r\n                );\r\n                \r\n            }\r\n            catch(error: any) {\r\n                console.log(error);\r\n                setResults({ results: [], terms: terms, error: error.message as string });\r\n                setFetching(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const addToDiagnoses = async (diagnosis: { name: string, desc: string }, index: number) => {\r\n        try {\r\n            await axios.post<Diagnosis>(`${apiBaseUrl}/diagnoses`, { code: diagnosis.name, name: diagnosis.desc });\r\n            dispatch(addDiagnosis({ code: diagnosis.name, name: diagnosis.desc }));\r\n            setAdded(added.map((a, i) => i !== index ? a : true));\r\n        }\r\n        catch(error: any) {\r\n            setResults({ terms: terms, results: results, error: error.message as string });\r\n        }\r\n        \r\n    };\r\n\r\n    const onKeyUp = (_e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        // https://stackoverflow.com/questions/4220126/run-javascript-function-when-user-finishes-typing-instead-of-on-key-up\r\n        clearTimeout(typingTimer);\r\n        if(/^[a-z 0-9-]{1}$|Backspace/i.exec(_e.key)) { // key press was a-z, 0-9, - or (back)space\r\n            if(inputRef.current?.value) {\r\n                typingTimer = setTimeout(() => void updateResultsList(inputRef.current?.value || ''), doneTypingInterval);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Field>\r\n                <label>search terms</label>\r\n                <input\r\n                    ref={inputRef}\r\n                    type='text'\r\n                    autoComplete=\"off\"\r\n                    id=\"search-term\"\r\n                    name=\"search-term\"\r\n                    onKeyUp={e => onKeyUp(e)}\r\n                />\r\n            </Form.Field>\r\n            <div\r\n                id='results-div'\r\n                style={{ minHeight: '10vh', maxHeight: '50vh', overflow: 'auto' }}\r\n                className={fetching ? 'ui segment loading' : undefined}\r\n            >\r\n                {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n                <SearchResultsList\r\n                    results={{terms, results}}\r\n                    onAdd={addToDiagnoses}\r\n                    added={added}\r\n                />\r\n            </div>\r\n            <div style={{ marginTop: '2vh' }}>\r\n                <Label color='blue'>\r\n                    powered by\r\n                    <Label.Detail as='a'>\r\n                        <span onClick={() => window.open('https://icdcodelookup.com', '_blank', 'noreferrer,noopener')}>\r\n                            <em>icdcodelookup</em>\r\n                        </span>\r\n                    </Label.Detail>\r\n                </Label>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default SearchICDCode;","import React from 'react';\r\nimport { Modal, Segment, Tab } from 'semantic-ui-react';\r\nimport { Diagnosis } from '../../types/types';\r\nimport AddDiagnosisForm, { DiagnosisFormValues } from './AddDiagnosisForm';\r\nimport SearchICDCodeForm from '../SearchICDCode';\r\n\r\ninterface Props {\r\n  modalOpen: boolean; // whether modal is open\r\n  onClose: () => void;\r\n  onSubmit: (values: DiagnosisFormValues) => void;\r\n  error?: string; // error message for form\r\n  initialValues: Diagnosis | undefined; // initial values for form\r\n}\r\n\r\nconst AddDiagnosisModal = ({ modalOpen, onClose, onSubmit, error, initialValues }: Props) => {\r\n  const tabs = () => {\r\n    return (\r\n      <Tab\r\n        panes={[\r\n          {\r\n            menuItem: 'add',\r\n            // eslint-disable-next-line react/display-name\r\n            render: () =>\r\n              <Tab.Pane>\r\n                {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n                <AddDiagnosisForm onSubmit={onSubmit} onCancel={onClose} initialValues={initialValues} />\r\n              </Tab.Pane>\r\n          },\r\n          // eslint-disable-next-line react/display-name\r\n          initialValues === undefined ? { menuItem: 'search', render: () => <Tab.Pane><SearchICDCodeForm/></Tab.Pane> } : {}\r\n        ]}\r\n        renderActiveOnly={true}\r\n      />\r\n    );\r\n  };\r\n  return (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>{initialValues !== undefined ? 'Edit' : 'Add a'} diagnosis</Modal.Header>\r\n    <Modal.Content>\r\n      {tabs()}\r\n    </Modal.Content>\r\n  </Modal>\r\n  );\r\n};\r\n\r\nexport default AddDiagnosisModal;\r\n","import { Field } from 'formik';\r\nimport React from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { HealthCheckRating } from '../../types/types';\r\n\r\n// structure of a single gender option\r\nexport type HealthRatingOption = {\r\n    value: number;\r\n    label: string;\r\n};\r\n  \r\n// props for gender select field component\r\ntype SelectHealthRatingProps = {\r\n    name: string;\r\n    label: string;\r\n    options?: HealthRatingOption[];\r\n};\r\n\r\nconst extractOptions = () => {\r\n    return Object.entries(HealthCheckRating)\r\n        .filter(([k, v]) => v !== -1 && /[a-z]+/i.test(k))\r\n        .map(([k, v]) => ({ value: v as number, label: k.replace(/(.+[a-z])([A-Z].+)/g, '$1 $2') }));\r\n};\r\n  \r\n// gender select component\r\nexport const SelectHealthRating = ({\r\n    name,\r\n    label,\r\n    options = extractOptions()\r\n}: SelectHealthRatingProps) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n            {options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                </option>\r\n             ))}\r\n        </Field>\r\n    </Form.Field>\r\n);","import React, { useState } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { useStateValue } from '../../state';\r\nimport { TextField, DateField, SelectEntryType, SelectDiagnosis } from '../FormFields';\r\nimport { Diagnosis, EntryType, Discharge, HealthCheckRating, SickLeave } from '../../types/types';\r\nimport { Button, DropdownOnSearchChangeData } from 'semantic-ui-react';\r\nimport AddDiagnosisModal from '../AddDiagnosisModal';\r\nimport axios from '../../controllers';\r\nimport { apiBaseUrl } from '../../constants';\r\nimport { addDiagnosis } from '../../state/actions/diagnoses';\r\nimport { SelectHealthRating } from '../FormFields/SelectHealthRating';\r\n\r\nexport type EntryFormValues = {\r\n    id?: string;\r\n    description: string;\r\n    date: string | Date;\r\n    specialist: string;\r\n    diagnosisCodes?: Array<Diagnosis['code']>,\r\n    type: string,\r\n    healthCheckRating?: HealthCheckRating,\r\n    discharge?: Discharge,\r\n    employerName?: string,\r\n    sickLeave?: SickLeave,\r\n};\r\n\r\ninterface AnyObject {\r\n    [key: string]: string | null;\r\n}\r\n\r\ninterface Props {\r\n    onSubmit: (values: EntryFormValues) => void;\r\n    onCancel: () => void;\r\n    initialValues?: EntryFormValues;\r\n}\r\n\r\nconst AddEntryForm = ({ onSubmit, onCancel, initialValues }: Props) => {\r\n    const [{ diagnoses }, dispatch] = useStateValue();\r\n    const [searchQuery, setSearchQuery] = useState<{ query: string, exists: boolean } | undefined>(undefined);\r\n    const [searchModalOpen, setSearchModalOpen] = useState<boolean>(false);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const onSubmitDiagnosis = async (diagnosis: Diagnosis) => {\r\n        try {\r\n            const res = await axios.post<Diagnosis>(`${apiBaseUrl}/diagnoses`, diagnosis);\r\n            dispatch(addDiagnosis(res.data));\r\n            setSearchModalOpen(false);\r\n        }\r\n        catch(error) {\r\n            if(axios.isAxiosError(error)) {\r\n                setError(error?.response?.data.message as string);\r\n            }\r\n            else {\r\n                setError((error as Error).message);\r\n            }\r\n            console.log(error);\r\n            //setError(error.response.data.message);\r\n        }\r\n    };\r\n\r\n    const onSearchChange = (e: React.SyntheticEvent<HTMLElement, Event>, d: DropdownOnSearchChangeData) => {\r\n        // check if filtered search results include query\r\n        const exists = e.currentTarget.parentElement?.lastElementChild?.textContent?.toLowerCase().includes(d.searchQuery.trim().toLowerCase());\r\n        !exists\r\n            ? e.currentTarget.parentElement?.lastElementChild?.classList.remove('visible') // hide dropdown menu if not\r\n            : e.currentTarget.parentElement?.lastElementChild?.classList.add('visible');\r\n        setSearchQuery({\r\n            query: d.searchQuery.trim(),\r\n            exists: exists || false\r\n        });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Formik\r\n            initialValues={\r\n                !initialValues\r\n                ? {\r\n                    description: '',\r\n                    date: new Date(),\r\n                    specialist: '',\r\n                    type: '',\r\n                    healthCheckRating: 0,\r\n                    discharge: {\r\n                        date: '',\r\n                        criteria: ''\r\n                    },\r\n                    employerName: '',\r\n                    sickLeave: {\r\n                        startDate: '',\r\n                        endDate: ''\r\n                    },\r\n                    diagnosisCodes: [],\r\n                }\r\n                : {\r\n                    id: initialValues.id, // used to pass entry id to onSubmit\r\n                    description: initialValues.description,\r\n                    date: initialValues.date,\r\n                    specialist: initialValues.specialist,\r\n                    type: initialValues.type,\r\n                    healthCheckRating: initialValues.healthCheckRating || 0,\r\n                    discharge: {\r\n                        date: initialValues.discharge?.date || '',\r\n                        criteria: initialValues.discharge?.criteria || ''\r\n                    },\r\n                    employerName: initialValues.employerName || '',\r\n                    sickLeave: {\r\n                        startDate: initialValues.sickLeave?.startDate || '',\r\n                        endDate: initialValues.sickLeave?.endDate || ''\r\n                    },\r\n                    diagnosisCodes: initialValues.diagnosisCodes || [],\r\n                }\r\n            }\r\n            onSubmit={onSubmit}\r\n            validate={(values) => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string | AnyObject } = {};\r\n                if (!values.description) {\r\n                errors.description = requiredError;\r\n                }\r\n                if (!values.date) {\r\n                    errors.date = requiredError;\r\n                }\r\n                if (!values.specialist) {\r\n                errors.specialist = requiredError;\r\n                }\r\n                if (!values.type) {\r\n                errors.type = requiredError;\r\n                }\r\n                if(\r\n                    values.type === EntryType.HealthCheckEntry && values.healthCheckRating !== undefined &&\r\n                    (values.healthCheckRating < HealthCheckRating.Healthy || values.healthCheckRating > HealthCheckRating.CriticalRisk)\r\n                ) {\r\n                    errors.healthCheckRating = requiredError;\r\n                }\r\n                if(values.type === EntryType.HospitalEntry) {\r\n                    if(values.discharge && !values.discharge.date)\r\n                        errors.discharge = Object.assign({ date: requiredError }, errors.discharge);\r\n                    if(values.discharge && !values.discharge.criteria)\r\n                        errors.discharge = Object.assign({ criteria: requiredError }, errors.discharge);\r\n                }\r\n                if(values.type === EntryType.OccupationalHealthcareEntry) {\r\n                    if(!values.employerName) {\r\n                        errors.employerName = requiredError;   \r\n                    }\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n        >\r\n        {({ isValid, dirty, setFieldValue, setFieldTouched, values }) => {\r\n            return (\r\n                <Form className=\"form ui\">\r\n                    <Field\r\n                        label=\"Description\"\r\n                        placeholder=\"Description\"\r\n                        name=\"description\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Date\"\r\n                        placeholder=\"YYYY-MM-DD\"\r\n                        name=\"date\"\r\n                        component={DateField}\r\n                        setFieldValue={setFieldValue}\r\n                        setFieldTouched={setFieldTouched}\r\n                    />\r\n                    <Field\r\n                        label=\"Specialist\"\r\n                        placeholder=\"Specialist\"\r\n                        name=\"specialist\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Entry type\"\r\n                        name=\"type\"\r\n                        setFieldValue={setFieldValue}\r\n                        setFieldTouched={setFieldTouched}\r\n                        entryTypes={Object.values(EntryType)}\r\n                        component={SelectEntryType}\r\n                        initialValue={initialValues?.type}\r\n                    />\r\n                    \r\n                    {values.type === EntryType.HealthCheckEntry &&\r\n                        <SelectHealthRating\r\n                            label=\"Health check rating\"\r\n                            name=\"healthCheckRating\"\r\n                        />\r\n                    }\r\n                    {values.type === EntryType.HospitalEntry &&\r\n                        <React.Fragment>\r\n                        <Field\r\n                            label=\"Discharge Date\"\r\n                            placeholder=\"YYYY-MM-DD\"\r\n                            name=\"discharge.date\"\r\n                            component={DateField}\r\n                            setFieldValue={setFieldValue}\r\n                            setFieldTouched={setFieldTouched}\r\n                        />\r\n                        <Field\r\n                            label=\"Discharge criteria\"\r\n                            placeholder=\"criteria\"\r\n                            name=\"discharge.criteria\"\r\n                            component={TextField}\r\n                        />\r\n                        </React.Fragment>\r\n                    }\r\n                    {values.type === EntryType.OccupationalHealthcareEntry &&\r\n                        <React.Fragment>\r\n                        <Field\r\n                            label=\"Empolyer Name\"\r\n                            placeholder=\"Employer name\"\r\n                            name=\"employerName\"\r\n                            component={TextField}\r\n                        />\r\n                        <Field\r\n                            label=\"Sick Leave Start Date\"\r\n                            placeholder=\"YYYY-MM-DD\"\r\n                            name=\"sickLeave.startDate\"\r\n                            component={DateField}\r\n                            setFieldValue={setFieldValue}\r\n                            setFieldTouched={setFieldTouched}\r\n                        />\r\n                        <Field\r\n                            label=\"Sick Leave End Date\"\r\n                            placeholder=\"YYYY-MM-DD\"\r\n                            name=\"sickLeave.endDate\"\r\n                            component={DateField}\r\n                            setFieldValue={setFieldValue}\r\n                            setFieldTouched={setFieldTouched}\r\n                        />\r\n                        </React.Fragment>\r\n                    }\r\n                    <Field\r\n                        label=\"Diagnosis\"\r\n                        placeholder=\"Diagnosis\"\r\n                        name=\"diagnosisCodes\"\r\n                        diagnoses={Object.values(diagnoses)}\r\n                        setFieldValue={setFieldValue}\r\n                        setFieldTouched={setFieldTouched}\r\n                        component={SelectDiagnosis}\r\n                        initialValues={initialValues?.diagnosisCodes}\r\n                        onSearchChange={onSearchChange}\r\n                    />\r\n\r\n                    { searchQuery && !searchQuery.exists &&\r\n                        <div>\r\n                            <span>&lsquo;{searchQuery.query}&rsquo; does not exist in diagnoses.</span>&nbsp;\r\n                            <a\r\n                                href=\"\"\r\n                                onClick={ e => {\r\n                                    e.preventDefault();\r\n                                    setSearchModalOpen(true);\r\n                                }\r\n                            }>\r\n                                Search or add it.\r\n                            </a>\r\n                        </div>\r\n                    }\r\n                    \r\n                    <div style={{ marginLeft: 'auto', marginRight: 'auto', width: 'max-content' }}>\r\n                        <Button color=\"green\" type=\"submit\" disabled={!dirty || !isValid}>Submit</Button>\r\n                        <Button color=\"red\" type=\"button\" onClick={() => onCancel()}>Cancel</Button>\r\n                        <Button color=\"blue\" type=\"reset\">Reset</Button>\r\n                    </div>\r\n                </Form>\r\n                );\r\n            }}\r\n            </Formik>\r\n            <AddDiagnosisModal\r\n                modalOpen={searchModalOpen}\r\n                onClose={() => {\r\n                        setSearchModalOpen(false);\r\n                        setSearchQuery({ query: '', exists: true });\r\n                    }\r\n                }\r\n                onSubmit={onSubmitDiagnosis}\r\n                initialValues={undefined}\r\n                error={error}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AddEntryForm;","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddEntryForm, { EntryFormValues } from \"./AddEntryForm\";\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  initialValues: EntryFormValues | undefined;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientEntry = ({ modalOpen, onSubmit, onClose, initialValues, error }: Props) => {\r\n    return (\r\n        <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n            <Modal.Header>{initialValues === undefined ? 'Add a new' : 'Edit'} entry</Modal.Header>\r\n            <Modal.Content>\r\n                {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n                <AddEntryForm onSubmit={onSubmit} onCancel={onClose} initialValues={initialValues} />\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddPatientEntry;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"../../controllers\";\r\nimport { useParams } from \"react-router\";\r\nimport { useStateValue } from \"../../state\";\r\nimport { Gender, Patient, EntryType, Entry } from \"../../types/types\";\r\nimport { apiBaseUrl } from \"../../constants\";\r\nimport { Button, CardGroup, Confirm, ConfirmProps, DropdownProps, Icon, Loader, Select, Table } from \"semantic-ui-react\";\r\nimport PatientEntryCard, { EntryAction } from \"../PatientEntryCard\";\r\nimport AddPatientEntry from \"../AddPatientEntryModal\";\r\nimport { EntryFormValues } from \"../AddPatientEntryModal/AddEntryForm\";\r\nimport { Action } from \"../../types/Action\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport '../../styles/general.css';\r\nimport { addPatient, removePatient } from \"../../state/actions/patients\";\r\nimport { fetchPatient } from \"../../controllers\";\r\nimport HealthRatingBar from \"../HealthRatingBar\";\r\n\r\ninterface PatientAction extends Action {\r\n    callback: (patient: Patient) => void\r\n}\r\n\r\nconst PatientInfo = () => {\r\n    const { id: patientId } = useParams<{ id: string }>();\r\n    const [{ patients }, dispatch] = useStateValue();\r\n    \r\n    const [entryModalOpen, setEntryModalOpen] = React.useState<boolean>(false);\r\n    const [patientModalOpen, setPatientModalOpen] = React.useState<boolean>(false);\r\n    const [error, setError] = useState<string | undefined>();\r\n    \r\n    const specialEntryKeys = ['patientId', 'healthCheckRating', 'discharge', 'employerName', 'sickLeave'];\r\n    const [initialValues, setInitialValues] = useState<EntryFormValues | PatientFormValues | undefined>(undefined);\r\n    const [confirm, setConfirm] = useState<ConfirmProps>({}); // confirmation modal props\r\n    const history = useHistory();\r\n    const [fetching, setFetching] = React.useState<boolean>(false);\r\n    const [entriesFilter, setEntriesFilter] = React.useState<string>('');\r\n    \r\n    const entryActions: EntryAction[] = [\r\n        { label: 'edit', iconName: 'edit', callback: (entry) => onEditEntry ? void onEditEntry(entry) : undefined },\r\n        {\r\n            label: 'delete',\r\n            iconName: 'trash',\r\n            callback: (entry) => openConfirm(\r\n                entry.description,\r\n                `Delete entry for ${entry.date}?`,\r\n                () => {\r\n                    void onDeleteEntry(entry);\r\n                    closeConfirm();\r\n                }\r\n            )\r\n        }\r\n    ];\r\n    const patientActions: PatientAction[] = [\r\n        { label: 'edit', iconName: 'edit', callback: (patient) => void onEditPatient(patient) },\r\n        {\r\n            label: 'delete',\r\n            iconName: 'trash',\r\n            callback: (patient) => openConfirm(\r\n                `Born on ${patient.dateOfBirth}, SSN ${patient.ssn}`,\r\n                `Delete patient entry for ${patient.name}?`,\r\n                () => {\r\n                    void onDeletePatient(patient.id);\r\n                    closeConfirm();\r\n                    history.push('/');\r\n                }\r\n            )\r\n        }\r\n    ];\r\n\r\n    const openEntryModal = (): void => {\r\n        setEntryModalOpen(true);\r\n    };\r\n\r\n    const closeEntryModal = (): void => {\r\n        setEntryModalOpen(false);\r\n        setInitialValues(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    const openPatientModal = (): void => {\r\n        setPatientModalOpen(true);\r\n    };\r\n\r\n    const closePatientModal = (): void => {\r\n        setPatientModalOpen(false);\r\n        setInitialValues(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    const closeConfirm = (): void => {\r\n        setConfirm({\r\n            ...confirm,\r\n            open: false,\r\n            content: ''\r\n        });\r\n    };\r\n    \r\n    const openConfirm = (message: string, header: string | null | undefined, onConfirm?: () => void, onCancel?: () => void): void => {\r\n        setConfirm({\r\n            //...confirm,\r\n            header: header,\r\n            content: message,\r\n            open: true,\r\n            /*...onConfirm && { onConfirm: onConfirm },\r\n            ...onCancel && { onCancel: onCancel }*/\r\n            onConfirm: onConfirm || confirm.onConfirm,\r\n            onCancel: onCancel || closeConfirm\r\n        });\r\n    };\r\n\r\n    const renderPatientEntries = (filter = '') => {\r\n        return (\r\n            <React.Fragment>\r\n                {patientId && patients[patientId].entries && patients[patientId].entries.length > 0\r\n\r\n                    ? <CardGroup>\r\n                        {patients[patientId]\r\n                            .entries.filter(entry => entry?.type?.includes(filter))\r\n                            .map(entry => <PatientEntryCard key={entry.id} entry={entry} actions={entryActions} onEdit={onEditEntry} onDelete={onDeleteEntry} />)\r\n                        }\r\n                    </CardGroup>\r\n\r\n                    : <em>no entries</em>\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const onSubmitEntry = async (values: EntryFormValues) => {\r\n        if(!patientId) return;\r\n        let newEntry = Object.fromEntries(Object.entries(values).filter(([key, ]) => !specialEntryKeys.includes(key)));\r\n\r\n        switch(values.type) {\r\n            case EntryType.HealthCheckEntry:\r\n                newEntry = {\r\n                    ...newEntry,\r\n                    //...(values.healthCheckRating !== undefined && { healthCheckRating: values.healthCheckRating })\r\n                    //healthCheckRating: values.healthCheckRating as HealthCheckRating\r\n                    healthCheckRating: Number(values.healthCheckRating) // select returns value as string!\r\n                };\r\n                break;\r\n            case EntryType.HospitalEntry:\r\n                newEntry = {\r\n                    ...newEntry,\r\n                    ...values.discharge && { discharge: values.discharge }\r\n                };\r\n                break;\r\n            case EntryType.OccupationalHealthcareEntry:\r\n                newEntry = {\r\n                    ...newEntry,\r\n                    ...values.employerName && {employerName: values.employerName},\r\n                    ...(values.sickLeave && values.sickLeave.startDate !== '' && values.sickLeave.endDate !== '' && { sickLeave: values.sickLeave })\r\n                };\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        try {\r\n            let response;\r\n            if(initialValues && values?.id) { // edit existing entry\r\n                response = await axios.put<Patient>(`${apiBaseUrl}/patients/${patientId}/entries/${values.id}`, { id: values.id, ...newEntry });\r\n            }\r\n            else { // post new entry\r\n                response = await axios.post<Patient>(`${apiBaseUrl}/patients/${patientId}/entries`, newEntry);\r\n                \r\n            }\r\n            dispatch(addPatient(response.data));\r\n            closeEntryModal();\r\n            //history.back();\r\n        }\r\n        catch(error) {\r\n            console.error(error);\r\n            if(axios.isAxiosError(error)) {\r\n                setError(error?.response?.data.error as string);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onEditEntry = (entry: Entry) => {\r\n        setInitialValues(entry);\r\n        openEntryModal();\r\n    };\r\n\r\n    const onDeleteEntry = async (entry: Entry) => {\r\n        if(!patientId) return;\r\n        try {\r\n            const { data: patient } = await axios.delete<Patient>(`${apiBaseUrl}/patients/${patientId}/entries/${entry.id}`);\r\n            dispatch(addPatient(patient));\r\n        }\r\n        catch(error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const onSubmitPatient = async (patient: PatientFormValues) => {\r\n        if(!patientId) return;\r\n        try {\r\n            const { data: submittedPatient } = await axios.put<Patient>(\r\n                `${apiBaseUrl}/patients/${patientId}`,\r\n                Object.fromEntries(Object.entries(patient).filter(([key,]) => !['id', 'entries'].includes(key)))\r\n            );\r\n            dispatch(addPatient(submittedPatient));\r\n            closePatientModal();\r\n        }\r\n        catch(error: any) {\r\n            if(axios.isAxiosError(error)) {\r\n                console.log(error.response?.data);\r\n                setError(error.response?.data.error as string);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onEditPatient = (patient: Patient) => {\r\n        setInitialValues(patient);\r\n        openPatientModal();\r\n    };\r\n\r\n    const onDeletePatient = async (id: string) => {\r\n        try {\r\n            await axios.delete(`${apiBaseUrl}/patients/${id}`);\r\n            dispatch(removePatient(id));\r\n        }\r\n        catch(error: unknown) {\r\n            console.log(error);\r\n            if(axios.isAxiosError(error)) {\r\n                setError(error?.response?.data?.error as string);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(patientId && (!patients[patientId] || !patients[patientId].entries)) {\r\n            setFetching(true);\r\n            void fetchPatient(patientId)\r\n                .then(data => {\r\n                    dispatch(addPatient(data as Patient));\r\n                })\r\n                .catch(error => {\r\n                    console.error(`Patient id ${patientId} does not exist`, error);\r\n                })\r\n                .finally(() => {\r\n                    setFetching(false);\r\n                });\r\n        }\r\n        //setConfirm({ ...confirm, onCancel: closeConfirm });\r\n    }, [patients[patientId || '']]);\r\n    \r\n    // nothing to render\r\n    if(!patientId || patients[patientId] === null) {\r\n        return null;\r\n    }\r\n\r\n    // patient does not exist\r\n    if(patients[patientId] === undefined) {\r\n        return (\r\n            <div>\r\n                <h2>Patient id {patientId} does not exist!</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div style={{ display: 'inline-flex', justifyContent: 'flex-end', position: 'relative', width: '100%', top: '2.15rem' }}>\r\n                    { \r\n                        patientActions.map(a =>\r\n                            <div\r\n                                key={`patient_action_${a.label}`}\r\n                                style={{ cursor: 'pointer' }}\r\n                                title={a.label}\r\n                                onClick={() => a.callback(patients[patientId])}\r\n                            >\r\n                                <Icon name={a.iconName} />\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <h2>{patients[patientId].name}&nbsp;\r\n                        <Icon\r\n                            name={patients[patientId].gender === Gender.Other\r\n                                ? 'genderless'\r\n                                : patients[patientId].gender === Gender.Male ? 'mars' : 'venus'\r\n                            }\r\n                        />\r\n                    </h2>\r\n                    <Table collapsing compact singleLine className=\"no-border no-padding-left low-line-height\">\r\n                        <Table.Body>\r\n                            <Table.Row>\r\n                                <Table.Cell>SSN</Table.Cell>\r\n                                <Table.Cell>{patients[patientId].ssn}</Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                                <Table.Cell>Occupation</Table.Cell>\r\n                                <Table.Cell>{patients[patientId].occupation}</Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                                <Table.Cell>Date of birth</Table.Cell>\r\n                                <Table.Cell>{patients[patientId].dateOfBirth}</Table.Cell>\r\n                            </Table.Row>\r\n                            <Table.Row>\r\n                                <Table.Cell>Health rating</Table.Cell>\r\n                                <Table.Cell><HealthRatingBar showText rating={patients[patientId].healthRating} inlineText /></Table.Cell>\r\n                            </Table.Row>\r\n                        </Table.Body>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '1%', position: 'relative', top: '2rem' }}>\r\n                    <div style={{ width: 'max-content'}}>\r\n                        <Select\r\n                            clearable\r\n                            disabled={patients[patientId]?.entries?.length === 0}\r\n                            placeholder=\"filter entries by type\"\r\n                            options={\r\n                                [\r\n                                    ...Object.values(EntryType).map(et => (\r\n                                        {\r\n                                            key: et,\r\n                                            text: et.split(/([A-Z][a-z]+)/).filter(e => e).join(' '),\r\n                                            value: et,\r\n                                        }\r\n                                    ))\r\n                                ]\r\n                            }\r\n                            onChange={ (_event: React.SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => setEntriesFilter(data.value as string)}\r\n                        />\r\n                    </div>\r\n                    <div style={{ width: 'max-content'}}>\r\n                        <Button\r\n                            as=\"a\"\r\n                            onClick={() => openEntryModal()}\r\n                        >\r\n                            add entry\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div>\r\n                    <h3>entries</h3>\r\n                    {fetching\r\n                        ? <Loader active content='Fetching entries' />\r\n                        : renderPatientEntries(entriesFilter)\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n            <AddPatientEntry modalOpen={entryModalOpen} onSubmit={onSubmitEntry} onClose={closeEntryModal} initialValues={initialValues as EntryFormValues} />\r\n            <AddPatientModal modalOpen={patientModalOpen} onSubmit={onSubmitPatient} onClose={closePatientModal} error={error} initialValues={initialValues as PatientFormValues} />\r\n            <Confirm {...confirm} />\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default PatientInfo;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"../../controllers\";\r\nimport { Container, Button, Confirm, ConfirmProps } from \"semantic-ui-react\";\r\n\r\nimport { DiagnosisFormValues } from \"../AddDiagnosisModal/AddDiagnosisForm\";\r\nimport AddDiagnosisModal from \"../AddDiagnosisModal\";\r\nimport { Diagnosis } from \"../../types/types\";\r\nimport { apiBaseUrl } from \"../../constants\";\r\nimport { useStateValue } from '../../state';\r\nimport { addDiagnosis, removeDiagnosis, setDiagnosisList } from \"../../state/actions/diagnoses\";\r\n\r\nimport SortableTable, { GenericAction } from '../SortableTable';\r\n\r\nconst DiagnosisListPage = () => {\r\n  const [{ diagnoses }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n  const [modalInitialValues, setModalInitialValues] = React.useState<Diagnosis | undefined>(); // intitial values to pass on edit\r\n\r\n  const actions: GenericAction<Diagnosis>[] = [ // actions for diagnosis\r\n    { label: 'edit', iconName: 'edit', arg: 'code', callback: code => void loadValuesToModal(code) },\r\n    { label: 'delete', iconName: 'trash',\r\n      arg: 'code',\r\n      callback: (code: string) => openConfirm(\r\n        `Delete diagnosis ${code} ${diagnoses[code].name}?`,\r\n        () => {\r\n          void deleteDiagnosis(code);\r\n          closeConfirm();\r\n        }\r\n      )\r\n    }\r\n  ];\r\n\r\n  const [confirm, setConfirm] = useState<ConfirmProps>({}); // confirmation modal props\r\n\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n    setModalInitialValues(undefined);\r\n  };\r\n\r\n  const closeConfirm = (): void => {\r\n    setConfirm({\r\n      ...confirm,\r\n      open: false,\r\n      content: ''\r\n    });\r\n  };\r\n\r\n  const openConfirm = (message: string, onConfirm?: () => void, onCancel?: () => void): void => {\r\n    setConfirm({\r\n      //...confirm,\r\n      content: message,\r\n      open: true,\r\n      /*...onConfirm && { onConfirm: onConfirm },\r\n      ...onCancel && { onCancel: onCancel }*/\r\n      onConfirm: onConfirm || confirm.onConfirm,\r\n      onCancel: onCancel || closeConfirm\r\n    });\r\n  };\r\n\r\n  const submitDiagnosis = async (values: DiagnosisFormValues) => {\r\n    try {\r\n      const { data: newDiagnosis } = modalInitialValues === undefined\r\n        ? await axios.post<Diagnosis>(`${apiBaseUrl}/diagnoses`, values)\r\n        : await axios.put<Diagnosis>(`${apiBaseUrl}/diagnoses/${values.code}`, values);\r\n      dispatch(addDiagnosis(newDiagnosis));\r\n      closeModal();\r\n    }\r\n    catch (e) {\r\n      if(axios.isAxiosError(e)) {\r\n        console.error(e.response?.data || 'Unknown Error');\r\n        setError(e.response?.data?.error as string || 'Unknown error');\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteDiagnosis = async (code: string) => {\r\n    try {\r\n        await axios.delete<void>(`${apiBaseUrl}/diagnoses/${code}`);\r\n        dispatch(removeDiagnosis(code));\r\n      closeModal();\r\n    }\r\n    catch(e) {\r\n      if(axios.isAxiosError(e)) {\r\n        console.error(e.response?.data || 'Unknown Error');\r\n        setError(e.response?.data?.error as string || 'Unknown error');\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadValuesToModal = (code: string) => {\r\n    setModalInitialValues(diagnoses[code]);\r\n    openModal();\r\n  };\r\n\r\n  const sortFunc = (key: keyof Diagnosis|undefined, order: boolean|undefined): (a: Diagnosis, b: Diagnosis) => number => {\r\n    return (a: Diagnosis, b: Diagnosis): number => {\r\n      if(key === undefined) return 0;\r\n      if(!a[key] || !b[key]) return 0;\r\n      return typeof a[key] === 'string'\r\n        ? (a[key] as string).localeCompare(b[key] as string, 'en', { sensitivity: 'base' }) * (order ? 1 : -1)\r\n        : (a[key] as string).localeCompare(b[key] as string, 'en', { numeric: true }) * (order ? 1 : -1);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDiagnosisList = async () => {\r\n        try {\r\n          const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(`${apiBaseUrl}/diagnoses`);\r\n          dispatch(setDiagnosisList(diagnosisListFromApi));\r\n        }\r\n        catch(error) {\r\n          console.error(error);\r\n        }\r\n    };\r\n    if(!diagnoses) {\r\n        void fetchDiagnosisList();\r\n    }\r\n    setConfirm({ ...confirm, onCancel: closeConfirm });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Diagnosis list</h3>\r\n      </Container>\r\n\r\n      <div style={{ maxHeight: '75vh', overflowY: 'auto', margin: '1em 0' }}>\r\n          <SortableTable<Diagnosis>\r\n              data={Object.values(diagnoses).map(d => d)}\r\n              header={[\r\n                {key: 'code', sortable: true },\r\n                {key: 'name', sortable: true},\r\n                {key: 'latin', sortable: false}\r\n              ]}\r\n              sortFunc={sortFunc}\r\n              actions={actions.map(a => ({ ...a, arg: 'code' }))}\r\n          />\r\n      </div>\r\n\r\n      <AddDiagnosisModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitDiagnosis}\r\n        error={error}\r\n        onClose={closeModal}\r\n        initialValues={modalInitialValues}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Diagnosis</Button>\r\n      <Confirm {...confirm} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiagnosisListPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Header, Loader, Table } from 'semantic-ui-react';\r\nimport axios from '../../controllers';\r\nimport { fetchUser } from '../../controllers/users';\r\nimport { useStateValue } from '../../state';\r\nimport { clearMessage, displayMessage } from '../../state/actions/message';\r\nimport { MessageVariation } from '../../types/types';\r\n\r\ninterface IUserInfo {\r\n    id: string,\r\n    username: string,\r\n    name?: string,\r\n    roles: [{ name: string, id: string }]\r\n}\r\n\r\nconst UserInfo = () => {\r\n    const { id: userId } = useParams<{ id: string }>();\r\n    const [, dispatch] = useStateValue();\r\n    const [user, setUser] = useState<IUserInfo | undefined>(undefined);\r\n    const [fetching, setFetching] = useState<boolean>(false);\r\n    \r\n    useEffect(() => {\r\n        /*if(userId === auth?.id) {\r\n            setUser(auth);\r\n            return;\r\n        }*/\r\n        setFetching(true);\r\n        if(userId) {\r\n            fetchUser(userId)\r\n                .then(data => {\r\n                    setUser(data);\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setUser(undefined);\r\n                    if(axios.isAxiosError(error)) {\r\n                        dispatch(displayMessage({\r\n                            text: { content: error.response?.data.error as string, header: 'Operation Failed' },\r\n                            type: MessageVariation.error\r\n                        }));\r\n                        setTimeout(() => { dispatch(clearMessage()); }, 3000);\r\n                    }\r\n                })\r\n                .finally(() => {\r\n                    setFetching(false);\r\n                });\r\n        }\r\n    }, [userId]);\r\n\r\n    if(!userId) return null;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header as=\"h3\">User Info</Header>\r\n            {\r\n                fetching\r\n                ? <Loader active content={`Fetching info for user id ${userId}`} />\r\n                : user  \r\n                    ? <Table compact celled collapsing className=\"no-border no-padding-left\">\r\n                        <Table.Body>\r\n                        <Table.Row>\r\n                            <Table.Cell><strong>Username</strong></Table.Cell>\r\n                            <Table.Cell>{user.username}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                            <Table.Cell><strong>Name</strong></Table.Cell>\r\n                            <Table.Cell>{user?.name}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                            <Table.Cell><strong>ID</strong></Table.Cell>\r\n                            <Table.Cell>{user.id}</Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                            <Table.Cell><strong>Roles</strong></Table.Cell>\r\n                            <Table.Cell>{user?.roles?.map(r => r.name).join(', ')}</Table.Cell>\r\n                        </Table.Row>\r\n                        </Table.Body>\r\n                      </Table>\r\n                    : <Header as=\"h2\">No info</Header>\r\n            }\r\n            \r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React, { useEffect } from \"react\";\r\nimport axios, { setAuthToken } from './controllers';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container, Message } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { useStateValue } from \"./state\";\r\nimport { setPatientList } from \"./state/actions/patients\";\r\nimport { setDiagnosisList } from \"./state/actions/diagnoses\";\r\nimport { loginUser, logoutUser as clearAuth } from \"./state/actions/auth\";\r\nimport { addScheduled, removeScheduled, removeAllScheduled } from \"./state/actions/scheduler\";\r\nimport { displayMessage, clearMessage } from \"./state/actions/message\";\r\nimport { Auth, Diagnosis, MessageVariation } from \"./types/types\";\r\n\r\nimport PatientListPage from \"./components/PatientListPage\";\r\nimport PatientInfo from \"./components/PatientInfoPage/PatientInfo\";\r\nimport DiagnosisListPage from \"./components/DiagnosisListPage\";\r\n\r\nimport './styles/general.css';\r\nimport { loginUser as authLogin, logoutUser, registerUser, scheduleRefreshToken } from \"./controllers/auth\";\r\nimport AuthenticationForm, { AuthenticationFormValues } from \"./components/AuthenticationPage\";\r\n\r\nimport { fetchPatients } from './controllers';\r\nimport UserInfo from \"./components/UserInfo\";\r\n\r\nconst App = () => {\r\n    const [{ auth, scheduler, message }, dispatch] = useStateValue();\r\n    let refreshHandler: NodeJS.Timeout | undefined = undefined;\r\n    //let checkBackendHandler: NodeJS.Timeout | undefined = undefined;\r\n    //let backendStatus: boolean | null = null;\r\n\r\n    React.useEffect(() => {\r\n        // retrieve stored access token\r\n        const storedToken = JSON.parse(localStorage.getItem('auth') || 'null') as Auth;\r\n        dispatch(loginUser(storedToken));\r\n        storedToken && setAuthToken(storedToken.token);\r\n        // clear scheduled setTimeouts on page refresh\r\n        window.addEventListener('beforeunload', () => clearScheduledTimeouts());\r\n    }, []);\r\n    \r\n    React.useEffect(() => {\r\n        const fetchPatientList = async (): Promise<void> => {\r\n            try {\r\n                dispatch(setPatientList(await fetchPatients()));\r\n            }\r\n            catch(e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n        const fetchDiagnosisList = async (): Promise<void> => {\r\n            try {\r\n                const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\r\n                  `${apiBaseUrl}/diagnoses`,\r\n                );\r\n                dispatch(setDiagnosisList(diagnosisListFromApi));\r\n            }\r\n            catch(error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        \r\n        console.log(`user is logged ${auth ? 'in' : 'out'}`);\r\n        // is logged in\r\n        if(auth && auth.token) {\r\n            void fetchPatientList();\r\n            void fetchDiagnosisList();\r\n            \r\n            console.log('will schedule access token refresh');\r\n            // schedule next access token refresh\r\n            refreshHandler = scheduleRefreshToken(auth, (t: Auth) => {\r\n                dispatch(loginUser(t));\r\n                t && setAuthToken(t.token);\r\n                localStorage.setItem('auth', JSON.stringify(t));\r\n                // remove oldest scheduled task id\r\n                dispatch(removeScheduled());\r\n            });\r\n            // save scheduled task id\r\n            //refreshHandler && dispatch(addScheduled(refreshHandler));\r\n            //console.log('refreshHandler', refreshHandler);\r\n        }\r\n        // on logout\r\n        else {\r\n            // clear all scheduled tasks\r\n            clearScheduledTimeouts();\r\n        }\r\n    }, [dispatch, auth?.id, auth?.token]);\r\n\r\n    useEffect(() => {\r\n        // if something went wrong with the refresh token\r\n        if(refreshHandler === undefined) {\r\n            clearScheduledTimeouts();\r\n            return localStorage.removeItem('auth');\r\n        }\r\n        // otherwise save scheduled task id\r\n        dispatch(addScheduled(refreshHandler));\r\n        console.log('refreshHandler', refreshHandler);\r\n    }, [refreshHandler]);\r\n\r\n    const clearScheduledTimeouts = () => {\r\n        scheduler.forEach((id, index, array) => {\r\n            clearTimeout(id);\r\n            if(index === array.length - 1) console.log(`cleared ${index + 1} scheduled tasks`);\r\n        });\r\n        dispatch(removeAllScheduled());\r\n    };\r\n\r\n    const submitCredentials = (username: string, password: string) => {\r\n        authLogin(username, password)\r\n            .then(data => {\r\n                console.log('access token', data);\r\n                dispatch(loginUser(data));\r\n                localStorage.setItem('auth', JSON.stringify(data));\r\n                dispatch(displayMessage({\r\n                    text: { content: `Logged in successfully as ${data?.name || data?.username || ''}`, header: 'Authentication Completed' },\r\n                    type: MessageVariation.success\r\n                }));\r\n                setTimeout(() => { dispatch(clearMessage()); }, 3000);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                if(axios.isAxiosError(error)) {\r\n                    dispatch(displayMessage({\r\n                        text: { content: error.response?.data.error as string, header: 'Authentication Failed' },\r\n                        type: MessageVariation.error\r\n                    }));\r\n                    setTimeout(() => { dispatch(clearMessage()); }, 3000);\r\n                }\r\n            });\r\n    };\r\n\r\n    const createUser = (username: string, password: string, name?: string) => {\r\n        registerUser(username, password, name)\r\n            .then(res => {\r\n                console.log('created user', res);\r\n                dispatch(displayMessage({\r\n                    text: { header: 'Authentication Completed', content: `User ${res.name || res.username} was created` },\r\n                    type: MessageVariation.success\r\n                }));\r\n            })\r\n            .then(() => {\r\n                // login new user\r\n                setTimeout(() => { submitCredentials(username, password); }, 1500);\r\n            })\r\n            .catch(error => {\r\n                if(axios.isAxiosError(error)) {\r\n                    console.log('axios error', error.code, error.response?.data);\r\n                    return;\r\n                }\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    const exitApp = async () => {\r\n        if(auth) {\r\n            try {\r\n                const res = await logoutUser(auth.id);\r\n                if(res.status === 200) {\r\n                    localStorage.removeItem('auth');\r\n                    dispatch(clearAuth());\r\n                }\r\n            }\r\n            catch(error) {\r\n                console.log(error);\r\n                dispatch(displayMessage({\r\n                    text: { header: 'Authentication Failed', content: `Logout failed for ${auth.name || auth.username}.` },\r\n                    type: MessageVariation.error\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Container>\r\n            <Header as=\"h1\">Patientor</Header>\r\n            {auth?.token &&\r\n              <React.Fragment>\r\n                <Container\r\n                  fluid\r\n                  style={{ position: 'relative' }}\r\n                >\r\n                  <Button as={Link} to=\"/\" primary>\r\n                    Home\r\n                  </Button>\r\n                  <Button as={Link} to=\"/diagnoses\" secondary>\r\n                    Diagnoses\r\n                  </Button>\r\n                  <Container\r\n                    style={{\r\n                      display: 'inline-flex',\r\n                      width: 'fit-content',\r\n                      height: '100%',\r\n                      position: 'absolute',\r\n                      right: '0',\r\n                      alignItems: 'center'\r\n                    }}\r\n                  >\r\n                    <span>logged in as <Link to={`/users/${auth.id}`}><strong>{auth.name || auth.username}</strong></Link>&nbsp;</span>\r\n                    <Button\r\n                      basic\r\n                      size=\"tiny\"\r\n                      floated=\"right\"\r\n                      icon=\"log out\"\r\n                      content=\"log out\"\r\n                      title=\"log out\"\r\n                      onClick={() => { void exitApp(); }}\r\n                    >\r\n                    </Button>\r\n                  </Container>\r\n                </Container>\r\n                <Divider hidden />\r\n                <Switch>\r\n                  <Route path=\"/patients/:id\">\r\n                    <PatientInfo />\r\n                  </Route>\r\n                  <Route path=\"/diagnoses\">\r\n                    <DiagnosisListPage />\r\n                  </Route>\r\n                  <Route path=\"/users/:id\">\r\n                    <UserInfo/>\r\n                  </Route>\r\n                  <Route exact path=\"/\">\r\n                    <PatientListPage />\r\n                  </Route>\r\n                  <Route path=\"*\">\r\n                    <Message error>\r\n                      <Message.Header>Error 404</Message.Header>\r\n                      <p>This page does not exist!</p>\r\n                    </Message>\r\n                  </Route>\r\n                </Switch>\r\n              </React.Fragment>\r\n            }\r\n            {!auth?.token &&\r\n              <AuthenticationForm\r\n                onSubmit={\r\n                  {\r\n                    auth: (values: AuthenticationFormValues) => { void submitCredentials(values.username, values.password); },\r\n                    register: (values: AuthenticationFormValues) => { void createUser(values.username, values.password, values.name); }\r\n                  }\r\n                }\r\n              />\r\n            }\r\n            <Message\r\n              hidden={!message?.show}\r\n              error={message?.type === 'error'}\r\n              success={message?.type === 'success'}\r\n              warning={message?.type === 'warning'}\r\n              info={message?.type === 'info'}\r\n              onDismiss={() => { dispatch(clearMessage()); }}\r\n              style={{ position: 'fixed', bottom: '.5%', width: 'inherit' }}\r\n            >\r\n              { message?.text.header && <Message.Header>{message.text.header}</Message.Header> }\r\n              <Message.Content>{message?.text.content}</Message.Content>\r\n            </Message>\r\n          </Container>\r\n        </Router>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export type SchedulerAction =\r\n    {\r\n    type: 'ADD_SCHEDULED',\r\n    payload: NodeJS.Timeout\r\n    }\r\n    |\r\n    {\r\n        type: 'REMOVE_SCHEDULED'\r\n    }\r\n    |\r\n    {\r\n        type: 'REMOVE_ALL_SCHEDULED'\r\n    };\r\n\r\nexport const addScheduled = (id: NodeJS.Timeout): SchedulerAction => {\r\n    return {\r\n        type: 'ADD_SCHEDULED',\r\n        payload: id\r\n    };\r\n};\r\n  \r\nexport const removeScheduled = (): SchedulerAction => {\r\n    return {\r\n        type: 'REMOVE_SCHEDULED'\r\n    };\r\n};\r\n  \r\nexport const removeAllScheduled = (): SchedulerAction => {\r\n    return {\r\n        type: 'REMOVE_ALL_SCHEDULED'\r\n    };\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n","import { Action } from \"./actions\";\r\nimport { AuthAction } from \"./actions/auth\";\r\nimport { DiagnosesAction } from \"./actions/diagnoses\";\r\nimport { MessageAction } from \"./actions/message\";\r\nimport { PatientsAction } from \"./actions/patients\";\r\nimport { SchedulerAction } from \"./actions/scheduler\";\r\nimport { State } from \"./state\";\r\n\r\nimport { reducer as patientsReducer } from \"./reducers/patients\";\r\nimport { reducer as diagnosesReducer } from \"./reducers/diagnoses\";\r\nimport { reducer as authReducer } from './reducers/auth';\r\nimport { reducer as schedulerReducer } from \"./reducers/scheduler\";\r\nimport { reducer as messageReducer } from \"./reducers/message\";\r\n\r\nexport const reducer = (\r\n  { patients, diagnoses, auth, scheduler, message }: State,\r\n  action: Action\r\n): State => ({\r\n  patients: patientsReducer(patients, action as PatientsAction),\r\n  diagnoses: diagnosesReducer(diagnoses, action as DiagnosesAction),\r\n  auth: authReducer(auth, action as AuthAction),\r\n  scheduler: schedulerReducer(scheduler, action as SchedulerAction),\r\n  message: messageReducer(message, action as MessageAction)\r\n});"],"sourceRoot":""}